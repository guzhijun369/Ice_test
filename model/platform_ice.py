# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `platform.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import platform_header_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.user
_M_com.jimi.user = Ice.openModule('com.jimi.user')

# Included module com.jimi.user.api
_M_com.jimi.user.api = Ice.openModule('com.jimi.user.api')

# Included module com.jimi.user.api.system
_M_com.jimi.user.api.system = Ice.openModule('com.jimi.user.api.system')

# Included module com.jimi.user.api.system.dto
_M_com.jimi.user.api.system.dto = Ice.openModule('com.jimi.user.api.system.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.user
__name__ = 'com.jimi.user'

# Start of module com.jimi.user.api
__name__ = 'com.jimi.user.api'

# Start of module com.jimi.user.api.system
__name__ = 'com.jimi.user.api.system'

if '_t_PlatformList' not in _M_com.jimi.user.api.system.__dict__:
    _M_com.jimi.user.api.system._t_PlatformList = IcePy.defineSequence('::com::jimi::user::api::system::PlatformList', (), _M_com.jimi.user.api.system.dto._t_PlatformOutputDTO)

if '_t_PlatformAppList' not in _M_com.jimi.user.api.system.__dict__:
    _M_com.jimi.user.api.system._t_PlatformAppList = IcePy.defineSequence('::com::jimi::user::api::system::PlatformAppList', (), _M_com.jimi.user.api.system.dto._t_PlatformAppOutputDTO)

_M_com.jimi.user.api.system._t_PlatformService = IcePy.defineValue('::com::jimi::user::api::system::PlatformService', Ice.Value, -1, (), False, True, None, ())

if 'PlatformServicePrx' not in _M_com.jimi.user.api.system.__dict__:
    _M_com.jimi.user.api.system.PlatformServicePrx = Ice.createTempClass()
    class PlatformServicePrx(Ice.ObjectPrx):

        """
        添加平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        context -- The request context for the invocation.
        Returns: 平台信息
        """
        def addPlatform(self, platformInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatform.invoke(self, ((platformInputDTO, ), context))

        """
        添加平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addPlatformAsync(self, platformInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatform.invokeAsync(self, ((platformInputDTO, ), context))

        """
        添加平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addPlatform(self, platformInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatform.begin(self, ((platformInputDTO, ), _response, _ex, _sent, context))

        """
        添加平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        Returns: 平台信息
        """
        def end_addPlatform(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatform.end(self, _r)

        """
        更新平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        context -- The request context for the invocation.
        """
        def updatePlatform(self, platformInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatform.invoke(self, ((platformInputDTO, ), context))

        """
        更新平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePlatformAsync(self, platformInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatform.invokeAsync(self, ((platformInputDTO, ), context))

        """
        更新平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePlatform(self, platformInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatform.begin(self, ((platformInputDTO, ), _response, _ex, _sent, context))

        """
        更新平台信息
        Arguments:
        platformInputDTO -- 平台相关信息
        """
        def end_updatePlatform(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatform.end(self, _r)

        """
        删除平台信息
        Arguments:
        platformCode -- 平台编码
        context -- The request context for the invocation.
        """
        def deletePlatformBy(self, platformCode, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformBy.invoke(self, ((platformCode, ), context))

        """
        删除平台信息
        Arguments:
        platformCode -- 平台编码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deletePlatformByAsync(self, platformCode, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformBy.invokeAsync(self, ((platformCode, ), context))

        """
        删除平台信息
        Arguments:
        platformCode -- 平台编码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deletePlatformBy(self, platformCode, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformBy.begin(self, ((platformCode, ), _response, _ex, _sent, context))

        """
        删除平台信息
        Arguments:
        platformCode -- 平台编码
        """
        def end_deletePlatformBy(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformBy.end(self, _r)

        """
        获取平台信息
        Arguments:
        context -- The request context for the invocation.
        Returns: 所有平台信息集合
        """
        def getAllPlatform(self, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatform.invoke(self, ((), context))

        """
        获取平台信息
        Arguments:
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def getAllPlatformAsync(self, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatform.invokeAsync(self, ((), context))

        """
        获取平台信息
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_getAllPlatform(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatform.begin(self, ((), _response, _ex, _sent, context))

        """
        获取平台信息
        Arguments:
        Returns: 所有平台信息集合
        """
        def end_getAllPlatform(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatform.end(self, _r)

        """
        更新平台Client相关内容
        Arguments:
        platformCode -- 平台编码
        context -- The request context for the invocation.
        Returns: 平台信息
        """
        def updatePlatformClientSecret(self, platformCode, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformClientSecret.invoke(self, ((platformCode, ), context))

        """
        更新平台Client相关内容
        Arguments:
        platformCode -- 平台编码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePlatformClientSecretAsync(self, platformCode, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformClientSecret.invokeAsync(self, ((platformCode, ), context))

        """
        更新平台Client相关内容
        Arguments:
        platformCode -- 平台编码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePlatformClientSecret(self, platformCode, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformClientSecret.begin(self, ((platformCode, ), _response, _ex, _sent, context))

        """
        更新平台Client相关内容
        Arguments:
        platformCode -- 平台编码
        Returns: 平台信息
        """
        def end_updatePlatformClientSecret(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformClientSecret.end(self, _r)

        """
        添加平台APP信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        context -- The request context for the invocation.
        Returns: 平台App信息
        """
        def addPlatformApp(self, platformAppInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatformApp.invoke(self, ((platformAppInputDTO, ), context))

        """
        添加平台APP信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addPlatformAppAsync(self, platformAppInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatformApp.invokeAsync(self, ((platformAppInputDTO, ), context))

        """
        添加平台APP信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addPlatformApp(self, platformAppInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatformApp.begin(self, ((platformAppInputDTO, ), _response, _ex, _sent, context))

        """
        添加平台APP信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        Returns: 平台App信息
        """
        def end_addPlatformApp(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_addPlatformApp.end(self, _r)

        """
        删除平台APP信息
        Arguments:
        appId -- 平台APP相关信息
        context -- The request context for the invocation.
        """
        def deletePlatformAppBy(self, appId, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformAppBy.invoke(self, ((appId, ), context))

        """
        删除平台APP信息
        Arguments:
        appId -- 平台APP相关信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deletePlatformAppByAsync(self, appId, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformAppBy.invokeAsync(self, ((appId, ), context))

        """
        删除平台APP信息
        Arguments:
        appId -- 平台APP相关信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deletePlatformAppBy(self, appId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformAppBy.begin(self, ((appId, ), _response, _ex, _sent, context))

        """
        删除平台APP信息
        Arguments:
        appId -- 平台APP相关信息
        """
        def end_deletePlatformAppBy(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_deletePlatformAppBy.end(self, _r)

        """
        更新平台App信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        context -- The request context for the invocation.
        """
        def updatePlatformApp(self, platformAppInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformApp.invoke(self, ((platformAppInputDTO, ), context))

        """
        更新平台App信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePlatformAppAsync(self, platformAppInputDTO, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformApp.invokeAsync(self, ((platformAppInputDTO, ), context))

        """
        更新平台App信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePlatformApp(self, platformAppInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformApp.begin(self, ((platformAppInputDTO, ), _response, _ex, _sent, context))

        """
        更新平台App信息
        Arguments:
        platformAppInputDTO -- 平台APP相关信息
        """
        def end_updatePlatformApp(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformApp.end(self, _r)

        """
        获取平台APP信息
        Arguments:
        context -- The request context for the invocation.
        Returns: 所有平台APP集合
        """
        def getAllPlatformApp(self, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatformApp.invoke(self, ((), context))

        """
        获取平台APP信息
        Arguments:
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def getAllPlatformAppAsync(self, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatformApp.invokeAsync(self, ((), context))

        """
        获取平台APP信息
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_getAllPlatformApp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatformApp.begin(self, ((), _response, _ex, _sent, context))

        """
        获取平台APP信息
        Arguments:
        Returns: 所有平台APP集合
        """
        def end_getAllPlatformApp(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_getAllPlatformApp.end(self, _r)

        """
        更新平台APP Client相关内容
        Arguments:
        appId -- 
        context -- The request context for the invocation.
        Returns: 平台信息
        """
        def updatePlatformAppClientSecret(self, appId, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformAppClientSecret.invoke(self, ((appId, ), context))

        """
        更新平台APP Client相关内容
        Arguments:
        appId -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePlatformAppClientSecretAsync(self, appId, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformAppClientSecret.invokeAsync(self, ((appId, ), context))

        """
        更新平台APP Client相关内容
        Arguments:
        appId -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePlatformAppClientSecret(self, appId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformAppClientSecret.begin(self, ((appId, ), _response, _ex, _sent, context))

        """
        更新平台APP Client相关内容
        Arguments:
        appId -- 
        Returns: 平台信息
        """
        def end_updatePlatformAppClientSecret(self, _r):
            return _M_com.jimi.user.api.system.PlatformService._op_updatePlatformAppClientSecret.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.user.api.system.PlatformServicePrx.ice_checkedCast(proxy, '::com::jimi::user::api::system::PlatformService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.user.api.system.PlatformServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::system::PlatformService'
    _M_com.jimi.user.api.system._t_PlatformServicePrx = IcePy.defineProxy('::com::jimi::user::api::system::PlatformService', PlatformServicePrx)

    _M_com.jimi.user.api.system.PlatformServicePrx = PlatformServicePrx
    del PlatformServicePrx

    _M_com.jimi.user.api.system.PlatformService = Ice.createTempClass()
    class PlatformService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::user::api::system::PlatformService')

        def ice_id(self, current=None):
            return '::com::jimi::user::api::system::PlatformService'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::system::PlatformService'

        def addPlatform(self, platformInputDTO, current=None):
            """
            添加平台信息
            Arguments:
            platformInputDTO -- 平台相关信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addPlatform' not implemented")

        def updatePlatform(self, platformInputDTO, current=None):
            """
            更新平台信息
            Arguments:
            platformInputDTO -- 平台相关信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePlatform' not implemented")

        def deletePlatformBy(self, platformCode, current=None):
            """
            删除平台信息
            Arguments:
            platformCode -- 平台编码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deletePlatformBy' not implemented")

        def getAllPlatform(self, current=None):
            """
            获取平台信息
            Arguments:
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'getAllPlatform' not implemented")

        def updatePlatformClientSecret(self, platformCode, current=None):
            """
            更新平台Client相关内容
            Arguments:
            platformCode -- 平台编码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePlatformClientSecret' not implemented")

        def addPlatformApp(self, platformAppInputDTO, current=None):
            """
            添加平台APP信息
            Arguments:
            platformAppInputDTO -- 平台APP相关信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addPlatformApp' not implemented")

        def deletePlatformAppBy(self, appId, current=None):
            """
            删除平台APP信息
            Arguments:
            appId -- 平台APP相关信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deletePlatformAppBy' not implemented")

        def updatePlatformApp(self, platformAppInputDTO, current=None):
            """
            更新平台App信息
            Arguments:
            platformAppInputDTO -- 平台APP相关信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePlatformApp' not implemented")

        def getAllPlatformApp(self, current=None):
            """
            获取平台APP信息
            Arguments:
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'getAllPlatformApp' not implemented")

        def updatePlatformAppClientSecret(self, appId, current=None):
            """
            更新平台APP Client相关内容
            Arguments:
            appId -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePlatformAppClientSecret' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.user.api.system._t_PlatformServiceDisp)

        __repr__ = __str__

    _M_com.jimi.user.api.system._t_PlatformServiceDisp = IcePy.defineClass('::com::jimi::user::api::system::PlatformService', PlatformService, (), None, ())
    PlatformService._ice_type = _M_com.jimi.user.api.system._t_PlatformServiceDisp

    PlatformService._op_addPlatform = IcePy.Operation('addPlatform', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.user.api.system.dto._t_PlatformInputDTO, False, 0),), (), ((), _M_com.jimi.user.api.system.dto._t_PlatformOutputDTO, False, 0), ())
    PlatformService._op_updatePlatform = IcePy.Operation('updatePlatform', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.user.api.system.dto._t_PlatformInputDTO, False, 0),), (), None, ())
    PlatformService._op_deletePlatformBy = IcePy.Operation('deletePlatformBy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    PlatformService._op_getAllPlatform = IcePy.Operation('getAllPlatform', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_com.jimi.user.api.system._t_PlatformList, False, 0), ())
    PlatformService._op_updatePlatformClientSecret = IcePy.Operation('updatePlatformClientSecret', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.user.api.system.dto._t_PlatformOutputDTO, False, 0), ())
    PlatformService._op_addPlatformApp = IcePy.Operation('addPlatformApp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.user.api.system.dto._t_PlatformAppInputDTO, False, 0),), (), ((), _M_com.jimi.user.api.system.dto._t_PlatformAppOutputDTO, False, 0), ())
    PlatformService._op_deletePlatformAppBy = IcePy.Operation('deletePlatformAppBy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    PlatformService._op_updatePlatformApp = IcePy.Operation('updatePlatformApp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.user.api.system.dto._t_PlatformAppInputDTO, False, 0),), (), None, ())
    PlatformService._op_getAllPlatformApp = IcePy.Operation('getAllPlatformApp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_com.jimi.user.api.system._t_PlatformAppList, False, 0), ())
    PlatformService._op_updatePlatformAppClientSecret = IcePy.Operation('updatePlatformAppClientSecret', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.user.api.system.dto._t_PlatformAppOutputDTO, False, 0), ())

    _M_com.jimi.user.api.system.PlatformService = PlatformService
    del PlatformService

# End of module com.jimi.user.api.system

__name__ = 'com.jimi.user.api'

# End of module com.jimi.user.api

__name__ = 'com.jimi.user'

# End of module com.jimi.user

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

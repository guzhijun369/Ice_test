# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `organization_info.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import organization_info_dto_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')

# Included module com.jimi.api.user
_M_com.jimi.api.user = Ice.openModule('com.jimi.api.user')

# Included module com.jimi.api.user.organization
_M_com.jimi.api.user.organization = Ice.openModule('com.jimi.api.user.organization')

# Included module com.jimi.api.user.organization.dto
_M_com.jimi.api.user.organization.dto = Ice.openModule('com.jimi.api.user.organization.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.api
__name__ = 'com.jimi.api'

# Start of module com.jimi.api.user
__name__ = 'com.jimi.api.user'

# Start of module com.jimi.api.user.organization
__name__ = 'com.jimi.api.user.organization'

if '_t_OrgList' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization._t_OrgList = IcePy.defineSequence('::com::jimi::api::user::organization::OrgList', (), _M_com.jimi.api.user.organization.dto._t_OrganizationOutputDTO)

_M_com.jimi.api.user.organization._t_OrganizationApi = IcePy.defineValue('::com::jimi::api::user::organization::OrganizationApi', Ice.Value, -1, (), False, True, None, ())

if 'OrganizationApiPrx' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization.OrganizationApiPrx = Ice.createTempClass()
    class OrganizationApiPrx(Ice.ObjectPrx):

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        """
        def delete(self, account, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_delete.invoke(self, ((account, oid), context))

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteAsync(self, account, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_delete.invokeAsync(self, ((account, oid), context))

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_delete(self, account, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_delete.begin(self, ((account, oid), _response, _ex, _sent, context))

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        """
        def end_delete(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_delete.end(self, _r)

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        disabled -- 
        context -- The request context for the invocation.
        """
        def disable(self, account, oid, disabled, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_disable.invoke(self, ((account, oid, disabled), context))

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        disabled -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disableAsync(self, account, oid, disabled, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_disable.invokeAsync(self, ((account, oid, disabled), context))

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        disabled -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disable(self, account, oid, disabled, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_disable.begin(self, ((account, oid, disabled), _response, _ex, _sent, context))

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        account -- 当前会话操作人
        oid -- 机构id
        disabled -- 
        """
        def end_disable(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_disable.end(self, _r)

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 下级机构基本信息
        """
        def findChildrenByOid(self, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findChildrenByOid.invoke(self, ((oid, ), context))

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findChildrenByOidAsync(self, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findChildrenByOid.invokeAsync(self, ((oid, ), context))

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findChildrenByOid(self, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findChildrenByOid.begin(self, ((oid, ), _response, _ex, _sent, context))

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        oid -- 机构id
        Returns: 下级机构基本信息
        """
        def end_findChildrenByOid(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findChildrenByOid.end(self, _r)

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 机构基本信息
        """
        def findByOid(self, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findByOid.invoke(self, ((oid, ), context))

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByOidAsync(self, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findByOid.invokeAsync(self, ((oid, ), context))

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findByOid(self, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findByOid.begin(self, ((oid, ), _response, _ex, _sent, context))

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        oid -- 机构id
        Returns: 机构基本信息
        """
        def end_findByOid(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_findByOid.end(self, _r)

        """
        添加或修改机构信息
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        dto -- 机构参数输入
        context -- The request context for the invocation.
        """
        def save(self, dto, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_save.invoke(self, ((dto, ), context))

        """
        添加或修改机构信息
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        dto -- 机构参数输入
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def saveAsync(self, dto, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_save.invokeAsync(self, ((dto, ), context))

        """
        添加或修改机构信息
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        dto -- 机构参数输入
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_save(self, dto, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_save.begin(self, ((dto, ), _response, _ex, _sent, context))

        """
        添加或修改机构信息
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        dto -- 机构参数输入
        """
        def end_save(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationApi._op_save.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::organization::OrganizationApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.organization.OrganizationApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationApi'
    _M_com.jimi.api.user.organization._t_OrganizationApiPrx = IcePy.defineProxy('::com::jimi::api::user::organization::OrganizationApi', OrganizationApiPrx)

    _M_com.jimi.api.user.organization.OrganizationApiPrx = OrganizationApiPrx
    del OrganizationApiPrx

    _M_com.jimi.api.user.organization.OrganizationApi = Ice.createTempClass()
    class OrganizationApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::organization::OrganizationApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::organization::OrganizationApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationApi'

        def delete(self, account, oid, current=None):
            """
            删除机构
            @author yaojianping
            @date 2019年8月21日 下午2:06:26
            Arguments:
            account -- 当前会话操作人
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'delete' not implemented")

        def disable(self, account, oid, disabled, current=None):
            """
            禁用/启用机构
            @author yaojianping
            @date 2019年8月21日 下午2:02:33
            Arguments:
            account -- 当前会话操作人
            oid -- 机构id
            disabled -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disable' not implemented")

        def findChildrenByOid(self, oid, current=None):
            """
            查询下级机构基本信息(该方法用于树形加载时)
            @author yaojianping
            @date 2019年8月21日 下午2:01:28
            Arguments:
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findChildrenByOid' not implemented")

        def findByOid(self, oid, current=None):
            """
            查询机构基本信息(该方法用于树形加载时)
            @author yaojianping
            @date 2019年8月21日 下午1:59:48
            Arguments:
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findByOid' not implemented")

        def save(self, dto, current=None):
            """
            添加或修改机构信息
            @author yaojianping
            @date 2019年8月22日 下午2:10:30
            Arguments:
            dto -- 机构参数输入
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'save' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.organization._t_OrganizationApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.organization._t_OrganizationApiDisp = IcePy.defineClass('::com::jimi::api::user::organization::OrganizationApi', OrganizationApi, (), None, ())
    OrganizationApi._ice_type = _M_com.jimi.api.user.organization._t_OrganizationApiDisp

    OrganizationApi._op_delete = IcePy.Operation('delete', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_com.jimi.api._t_ApiException,))
    OrganizationApi._op_disable = IcePy.Operation('disable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_com.jimi.api._t_ApiException,))
    OrganizationApi._op_findChildrenByOid = IcePy.Operation('findChildrenByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.organization._t_OrgList, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationApi._op_findByOid = IcePy.Operation('findByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.organization.dto._t_OrganizationOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationApi._op_save = IcePy.Operation('save', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.organization.dto._t_OrganizationInputDTO, False, 0),), (), None, (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.organization.OrganizationApi = OrganizationApi
    del OrganizationApi

# End of module com.jimi.api.user.organization

__name__ = 'com.jimi.api.user'

# End of module com.jimi.api.user

__name__ = 'com.jimi.api'

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

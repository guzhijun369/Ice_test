# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `organization_account.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import organization_account_dto_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')

# Included module com.jimi.api.user
_M_com.jimi.api.user = Ice.openModule('com.jimi.api.user')

# Included module com.jimi.api.user.organization
_M_com.jimi.api.user.organization = Ice.openModule('com.jimi.api.user.organization')

# Included module com.jimi.api.user.organization.dto
_M_com.jimi.api.user.organization.dto = Ice.openModule('com.jimi.api.user.organization.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.api
__name__ = 'com.jimi.api'

# Start of module com.jimi.api.user
__name__ = 'com.jimi.api.user'

# Start of module com.jimi.api.user.organization
__name__ = 'com.jimi.api.user.organization'

_M_com.jimi.api.user.organization._t_OrganizationAccountApi = IcePy.defineValue('::com::jimi::api::user::organization::OrganizationAccountApi', Ice.Value, -1, (), False, True, None, ())

if 'OrganizationAccountApiPrx' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization.OrganizationAccountApiPrx = Ice.createTempClass()
    class OrganizationAccountApiPrx(Ice.ObjectPrx):

        """
        添加修改账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        account -- 当前会话操作人
        dto -- 
        context -- The request context for the invocation.
        """
        def save(self, account, dto, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_save.invoke(self, ((account, dto), context))

        """
        添加修改账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        account -- 当前会话操作人
        dto -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def saveAsync(self, account, dto, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_save.invokeAsync(self, ((account, dto), context))

        """
        添加修改账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        account -- 当前会话操作人
        dto -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_save(self, account, dto, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_save.begin(self, ((account, dto), _response, _ex, _sent, context))

        """
        添加修改账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        account -- 当前会话操作人
        dto -- 
        """
        def end_save(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_save.end(self, _r)

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        disabled -- 
        context -- The request context for the invocation.
        """
        def disable(self, account, uid, disabled, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_disable.invoke(self, ((account, uid, disabled), context))

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        disabled -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disableAsync(self, account, uid, disabled, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_disable.invokeAsync(self, ((account, uid, disabled), context))

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        disabled -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disable(self, account, uid, disabled, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_disable.begin(self, ((account, uid, disabled), _response, _ex, _sent, context))

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        disabled -- 
        """
        def end_disable(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_disable.end(self, _r)

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        context -- The request context for the invocation.
        Returns: 返回随机新密码
        """
        def resetPassword(self, account, uid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_resetPassword.invoke(self, ((account, uid), context))

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def resetPasswordAsync(self, account, uid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_resetPassword.invokeAsync(self, ((account, uid), context))

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_resetPassword(self, account, uid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_resetPassword.begin(self, ((account, uid), _response, _ex, _sent, context))

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        account -- 当前会话操作人
        uid -- 账号id
        Returns: 返回随机新密码
        """
        def end_resetPassword(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_resetPassword.end(self, _r)

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        dto -- 
        context -- The request context for the invocation.
        Returns: 账号列表
        """
        def page(self, dto, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_page.invoke(self, ((dto, ), context))

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        dto -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def pageAsync(self, dto, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_page.invokeAsync(self, ((dto, ), context))

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        dto -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_page(self, dto, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_page.begin(self, ((dto, ), _response, _ex, _sent, context))

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        dto -- 
        Returns: 账号列表
        """
        def end_page(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationAccountApi._op_page.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::organization::OrganizationAccountApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.organization.OrganizationAccountApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationAccountApi'
    _M_com.jimi.api.user.organization._t_OrganizationAccountApiPrx = IcePy.defineProxy('::com::jimi::api::user::organization::OrganizationAccountApi', OrganizationAccountApiPrx)

    _M_com.jimi.api.user.organization.OrganizationAccountApiPrx = OrganizationAccountApiPrx
    del OrganizationAccountApiPrx

    _M_com.jimi.api.user.organization.OrganizationAccountApi = Ice.createTempClass()
    class OrganizationAccountApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::organization::OrganizationAccountApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::organization::OrganizationAccountApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationAccountApi'

        def save(self, account, dto, current=None):
            """
            添加修改账号信息
            @author yaojianping
            @date 2019年8月21日 下午2:55:02
            Arguments:
            account -- 当前会话操作人
            dto -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'save' not implemented")

        def disable(self, account, uid, disabled, current=None):
            """
            禁用/启用账号
            @author yaojianping
            @date 2019年8月21日 下午2:56:09
            Arguments:
            account -- 当前会话操作人
            uid -- 账号id
            disabled -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disable' not implemented")

        def resetPassword(self, account, uid, current=None):
            """
            重置密码
            @author yaojianping
            @date 2019年8月21日 下午2:57:02
            Arguments:
            account -- 当前会话操作人
            uid -- 账号id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'resetPassword' not implemented")

        def page(self, dto, current=None):
            """
            查询账号信息
            @author yaojianping
            @date 2019年8月21日 下午2:57:33
            Arguments:
            dto -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'page' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.organization._t_OrganizationAccountApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.organization._t_OrganizationAccountApiDisp = IcePy.defineClass('::com::jimi::api::user::organization::OrganizationAccountApi', OrganizationAccountApi, (), None, ())
    OrganizationAccountApi._ice_type = _M_com.jimi.api.user.organization._t_OrganizationAccountApiDisp

    OrganizationAccountApi._op_save = IcePy.Operation('save', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), _M_com.jimi.api.user.organization.dto._t_AccountInputDTO, False, 0)), (), None, (_M_com.jimi.api._t_ApiException,))
    OrganizationAccountApi._op_disable = IcePy.Operation('disable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_com.jimi.api._t_ApiException,))
    OrganizationAccountApi._op_resetPassword = IcePy.Operation('resetPassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationAccountApi._op_page = IcePy.Operation('page', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.organization.dto._t_AccountPageInputDTO, False, 0),), (), ((), _M_com.jimi.api.user.organization.dto._t_AccountPageOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.organization.OrganizationAccountApi = OrganizationAccountApi
    del OrganizationAccountApi

# End of module com.jimi.api.user.organization

__name__ = 'com.jimi.api.user'

# End of module com.jimi.api.user

__name__ = 'com.jimi.api'

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `demo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ticket
_M_ticket = Ice.openModule('ticket')
__name__ = 'ticket'

if 'TestException' not in _M_ticket.__dict__:
    _M_ticket.TestException = Ice.createTempClass()


    class TestException(Ice.UserException):
        def __init__(self, code='', msg=''):
            self.code = code
            self.msg = msg

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::ticket::TestException'


    _M_ticket._t_TestException = IcePy.defineException('::ticket::TestException', TestException, (), False, None, (
        ('code', (), IcePy._t_string, False, 0),
        ('msg', (), IcePy._t_string, False, 0)
    ))
    TestException._ice_type = _M_ticket._t_TestException

    _M_ticket.TestException = TestException
    del TestException

if 'Order' not in _M_ticket.__dict__:
    _M_ticket.Order = Ice.createTempClass()


    class Order(object):
        """
        phone -- 
        orderNum -- 
        orderDate -- 
        ticketType -- 
        amount -- 
        orderStatus -- 
        """

        def __init__(self, orderId=0, phone='', orderNum='', orderDate=0, ticketType=0, amount=0.0, orderStatus=0):
            self.orderId = orderId
            self.phone = phone
            self.orderNum = orderNum
            self.orderDate = orderDate
            self.ticketType = ticketType
            self.amount = amount
            self.orderStatus = orderStatus

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_ticket.Order):
                return NotImplemented
            else:
                if self.orderId != other.orderId:
                    return False
                if self.phone != other.phone:
                    return False
                if self.orderNum != other.orderNum:
                    return False
                if self.orderDate != other.orderDate:
                    return False
                if self.ticketType != other.ticketType:
                    return False
                if self.amount != other.amount:
                    return False
                if self.orderStatus != other.orderStatus:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_ticket._t_Order)

        __repr__ = __str__


    _M_ticket._t_Order = IcePy.defineStruct('::ticket::Order', Order, (), (
        ('orderId', (), IcePy._t_long),
        ('phone', (), IcePy._t_string),
        ('orderNum', (), IcePy._t_string),
        ('orderDate', (), IcePy._t_long),
        ('ticketType', (), IcePy._t_int),
        ('amount', (), IcePy._t_double),
        ('orderStatus', (), IcePy._t_int)
    ))

    _M_ticket.Order = Order
    del Order

if '_t_orderSeq' not in _M_ticket.__dict__:
    _M_ticket._t_orderSeq = IcePy.defineSequence('::ticket::orderSeq', (), _M_ticket._t_Order)

_M_ticket._t_OrderService = IcePy.defineValue('::ticket::OrderService', Ice.Value, -1, (), False, True, None, ())

if 'OrderServicePrx' not in _M_ticket.__dict__:
    _M_ticket.OrderServicePrx = Ice.createTempClass()


    class OrderServicePrx(Ice.ObjectPrx):
        """
        ��������
        Arguments:
        myOrder -- ������Ϣ
        context -- The request context for the invocation.
        """

        def createOrder(self, myOrder, context=None):
            return _M_ticket.OrderService._op_createOrder.invoke(self, ((myOrder,), context))

        """
        ��������
        Arguments:
        myOrder -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """

        def createOrderAsync(self, myOrder, context=None):
            return _M_ticket.OrderService._op_createOrder.invokeAsync(self, ((myOrder,), context))

        """
        ��������
        Arguments:
        myOrder -- ������Ϣ
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """

        def begin_createOrder(self, myOrder, _response=None, _ex=None, _sent=None, context=None):
            return _M_ticket.OrderService._op_createOrder.begin(self, ((myOrder,), _response, _ex, _sent, context))

        """
        ��������
        Arguments:
        myOrder -- ������Ϣ
        """

        def end_createOrder(self, _r):
            return _M_ticket.OrderService._op_createOrder.end(self, _r)

        def queryByPhone(self, phone, context=None):
            return _M_ticket.OrderService._op_queryByPhone.invoke(self, ((phone,), context))

        def queryByPhoneAsync(self, phone, context=None):
            return _M_ticket.OrderService._op_queryByPhone.invokeAsync(self, ((phone,), context))

        def begin_queryByPhone(self, phone, _response=None, _ex=None, _sent=None, context=None):
            return _M_ticket.OrderService._op_queryByPhone.begin(self, ((phone,), _response, _ex, _sent, context))

        def end_queryByPhone(self, _r):
            return _M_ticket.OrderService._op_queryByPhone.end(self, _r)

        def cannelOrder(self, orderId, context=None):
            return _M_ticket.OrderService._op_cannelOrder.invoke(self, ((orderId,), context))

        def cannelOrderAsync(self, orderId, context=None):
            return _M_ticket.OrderService._op_cannelOrder.invokeAsync(self, ((orderId,), context))

        def begin_cannelOrder(self, orderId, _response=None, _ex=None, _sent=None, context=None):
            return _M_ticket.OrderService._op_cannelOrder.begin(self, ((orderId,), _response, _ex, _sent, context))

        def end_cannelOrder(self, _r):
            return _M_ticket.OrderService._op_cannelOrder.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ticket.OrderServicePrx.ice_checkedCast(proxy, '::ticket::OrderService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ticket.OrderServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ticket::OrderService'


    _M_ticket._t_OrderServicePrx = IcePy.defineProxy('::ticket::OrderService', OrderServicePrx)

    _M_ticket.OrderServicePrx = OrderServicePrx
    del OrderServicePrx

    _M_ticket.OrderService = Ice.createTempClass()


    class OrderService(Ice.Object):
        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ticket::OrderService')

        def ice_id(self, current=None):
            return '::ticket::OrderService'

        @staticmethod
        def ice_staticId():
            return '::ticket::OrderService'

        def createOrder(self, myOrder, current=None):
            """
            ��������
            Arguments:
            myOrder -- ������Ϣ
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'createOrder' not implemented")

        def queryByPhone(self, phone, current=None):
            raise NotImplementedError("servant method 'queryByPhone' not implemented")

        def cannelOrder(self, orderId, current=None):
            raise NotImplementedError("servant method 'cannelOrder' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ticket._t_OrderServiceDisp)

        __repr__ = __str__


    _M_ticket._t_OrderServiceDisp = IcePy.defineClass('::ticket::OrderService', OrderService, (), None, ())
    OrderService._ice_type = _M_ticket._t_OrderServiceDisp

    OrderService._op_createOrder = IcePy.Operation('createOrder', Ice.OperationMode.Normal, Ice.OperationMode.Normal,
                                                   False, None, (), (((), _M_ticket._t_Order, False, 0),), (),
                                                   ((), IcePy._t_bool, False, 0), (_M_ticket._t_TestException,))
    OrderService._op_queryByPhone = IcePy.Operation('queryByPhone', Ice.OperationMode.Normal, Ice.OperationMode.Normal,
                                                    False, None, (), (((), IcePy._t_string, False, 0),), (),
                                                    ((), _M_ticket._t_orderSeq, False, 0), ())
    OrderService._op_cannelOrder = IcePy.Operation('cannelOrder', Ice.OperationMode.Normal, Ice.OperationMode.Normal,
                                                   False, None, (), (((), IcePy._t_long, False, 0),), (),
                                                   ((), IcePy._t_bool, False, 0), (_M_ticket._t_TestException,))

    _M_ticket.OrderService = OrderService
    del OrderService

# End of module ticket

# Start of module sms
_M_sms = Ice.openModule('sms')
__name__ = 'sms'

_M_sms._t_SMSService = IcePy.defineValue('::sms::SMSService', Ice.Value, -1, (), False, True, None, ())

if 'SMSServicePrx' not in _M_sms.__dict__:
    _M_sms.SMSServicePrx = Ice.createTempClass()


    class SMSServicePrx(Ice.ObjectPrx):
        def sendSmsMsg(self, msg, context=None):
            return _M_sms.SMSService._op_sendSmsMsg.invoke(self, ((msg,), context))

        def sendSmsMsgAsync(self, msg, context=None):
            return _M_sms.SMSService._op_sendSmsMsg.invokeAsync(self, ((msg,), context))

        def begin_sendSmsMsg(self, msg, _response=None, _ex=None, _sent=None, context=None):
            return _M_sms.SMSService._op_sendSmsMsg.begin(self, ((msg,), _response, _ex, _sent, context))

        def end_sendSmsMsg(self, _r):
            return _M_sms.SMSService._op_sendSmsMsg.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_sms.SMSServicePrx.ice_checkedCast(proxy, '::sms::SMSService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_sms.SMSServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::sms::SMSService'


    _M_sms._t_SMSServicePrx = IcePy.defineProxy('::sms::SMSService', SMSServicePrx)

    _M_sms.SMSServicePrx = SMSServicePrx
    del SMSServicePrx

    _M_sms.SMSService = Ice.createTempClass()


    class SMSService(Ice.Object):
        def ice_ids(self, current=None):
            return ('::Ice::Object', '::sms::SMSService')

        def ice_id(self, current=None):
            return '::sms::SMSService'

        @staticmethod
        def ice_staticId():
            return '::sms::SMSService'

        def sendSmsMsg(self, msg, current=None):
            raise NotImplementedError("servant method 'sendSmsMsg' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_sms._t_SMSServiceDisp)

        __repr__ = __str__


    _M_sms._t_SMSServiceDisp = IcePy.defineClass('::sms::SMSService', SMSService, (), None, ())
    SMSService._ice_type = _M_sms._t_SMSServiceDisp

    SMSService._op_sendSmsMsg = IcePy.Operation('sendSmsMsg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False,
                                                None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_sms.SMSService = SMSService
    del SMSService

# End of module sms

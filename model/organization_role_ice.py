# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `organization_role.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import organization_role_dto_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')

# Included module com.jimi.api.user
_M_com.jimi.api.user = Ice.openModule('com.jimi.api.user')

# Included module com.jimi.api.user.organization
_M_com.jimi.api.user.organization = Ice.openModule('com.jimi.api.user.organization')

# Included module com.jimi.api.user.organization.dto
_M_com.jimi.api.user.organization.dto = Ice.openModule('com.jimi.api.user.organization.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.api
__name__ = 'com.jimi.api'

# Start of module com.jimi.api.user
__name__ = 'com.jimi.api.user'

# Start of module com.jimi.api.user.organization
__name__ = 'com.jimi.api.user.organization'

if '_t_RoleList' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization._t_RoleList = IcePy.defineSequence('::com::jimi::api::user::organization::RoleList', (), _M_com.jimi.api.user.organization.dto._t_RoleOutput)

if '_t_RoleIdList' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization._t_RoleIdList = IcePy.defineSequence('::com::jimi::api::user::organization::RoleIdList', (), IcePy._t_string)

_M_com.jimi.api.user.organization._t_OrganizationRoleApi = IcePy.defineValue('::com::jimi::api::user::organization::OrganizationRoleApi', Ice.Value, -1, (), False, True, None, ())

if 'OrganizationRoleApiPrx' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization.OrganizationRoleApiPrx = Ice.createTempClass()
    class OrganizationRoleApiPrx(Ice.ObjectPrx):

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 角色列表
        """
        def findByOid(self, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_findByOid.invoke(self, ((oid, ), context))

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByOidAsync(self, oid, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_findByOid.invokeAsync(self, ((oid, ), context))

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findByOid(self, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_findByOid.begin(self, ((oid, ), _response, _ex, _sent, context))

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        oid -- 机构id
        Returns: 角色列表
        """
        def end_findByOid(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_findByOid.end(self, _r)

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        account -- 当前会话操作人
        input -- 角色参数
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def addRole(self, account, input, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_addRole.invoke(self, ((account, input), context))

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        account -- 当前会话操作人
        input -- 角色参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addRoleAsync(self, account, input, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_addRole.invokeAsync(self, ((account, input), context))

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        account -- 当前会话操作人
        input -- 角色参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addRole(self, account, input, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_addRole.begin(self, ((account, input), _response, _ex, _sent, context))

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        account -- 当前会话操作人
        input -- 角色参数
        Returns: true-成功，false-失败
        """
        def end_addRole(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_addRole.end(self, _r)

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        account -- 当前会话操作人
        roleId -- 角色id
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def deleteRole(self, account, roleId, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_deleteRole.invoke(self, ((account, roleId), context))

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        account -- 当前会话操作人
        roleId -- 角色id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteRoleAsync(self, account, roleId, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_deleteRole.invokeAsync(self, ((account, roleId), context))

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        account -- 当前会话操作人
        roleId -- 角色id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteRole(self, account, roleId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_deleteRole.begin(self, ((account, roleId), _response, _ex, _sent, context))

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        account -- 当前会话操作人
        roleId -- 角色id
        Returns: true-成功，false-失败
        """
        def end_deleteRole(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_deleteRole.end(self, _r)

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        account -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        context -- The request context for the invocation.
        """
        def authorize(self, account, uid, roleId, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_authorize.invoke(self, ((account, uid, roleId), context))

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        account -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def authorizeAsync(self, account, uid, roleId, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_authorize.invokeAsync(self, ((account, uid, roleId), context))

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        account -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_authorize(self, account, uid, roleId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_authorize.begin(self, ((account, uid, roleId), _response, _ex, _sent, context))

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        account -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        """
        def end_authorize(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationRoleApi._op_authorize.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::organization::OrganizationRoleApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.organization.OrganizationRoleApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationRoleApi'
    _M_com.jimi.api.user.organization._t_OrganizationRoleApiPrx = IcePy.defineProxy('::com::jimi::api::user::organization::OrganizationRoleApi', OrganizationRoleApiPrx)

    _M_com.jimi.api.user.organization.OrganizationRoleApiPrx = OrganizationRoleApiPrx
    del OrganizationRoleApiPrx

    _M_com.jimi.api.user.organization.OrganizationRoleApi = Ice.createTempClass()
    class OrganizationRoleApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::organization::OrganizationRoleApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::organization::OrganizationRoleApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationRoleApi'

        def findByOid(self, oid, current=None):
            """
            查询机构的角色基本信息
            @author yaojianping
            @date 2019年8月21日 下午2:34:07
            Arguments:
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findByOid' not implemented")

        def addRole(self, account, input, current=None):
            """
            添加角色
            @author yaojianping
            @date 2019年8月21日 下午2:13:57
            Arguments:
            account -- 当前会话操作人
            input -- 角色参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addRole' not implemented")

        def deleteRole(self, account, roleId, current=None):
            """
            删除角色
            @author yaojianping
            @date 2019年8月21日 下午2:25:53
            Arguments:
            account -- 当前会话操作人
            roleId -- 角色id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteRole' not implemented")

        def authorize(self, account, uid, roleId, current=None):
            """
            授权
            @author yaojianping
            @date 2019年8月21日 下午2:26:23
            Arguments:
            account -- 当前会话操作人
            uid -- 用户id
            roleId -- 角色id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'authorize' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.organization._t_OrganizationRoleApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.organization._t_OrganizationRoleApiDisp = IcePy.defineClass('::com::jimi::api::user::organization::OrganizationRoleApi', OrganizationRoleApi, (), None, ())
    OrganizationRoleApi._ice_type = _M_com.jimi.api.user.organization._t_OrganizationRoleApiDisp

    OrganizationRoleApi._op_findByOid = IcePy.Operation('findByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), _M_com.jimi.api.user.organization._t_RoleList, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationRoleApi._op_addRole = IcePy.Operation('addRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), _M_com.jimi.api.user.organization.dto._t_AddRoleInput, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationRoleApi._op_deleteRole = IcePy.Operation('deleteRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationRoleApi._op_authorize = IcePy.Operation('authorize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0), ((), _M_com.jimi.api.user.organization._t_RoleIdList, False, 0)), (), None, (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.organization.OrganizationRoleApi = OrganizationRoleApi
    del OrganizationRoleApi

# End of module com.jimi.api.user.organization

__name__ = 'com.jimi.api.user'

# End of module com.jimi.api.user

__name__ = 'com.jimi.api'

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

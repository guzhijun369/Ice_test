# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `common.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')
__name__ = 'com.jimi'

# Start of module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')
__name__ = 'com.jimi.api'

if 'ErrorCode' not in _M_com.jimi.api.__dict__:
    _M_com.jimi.api.ErrorCode = Ice.createTempClass()
    class ErrorCode(Ice.EnumBase):
        """
        错误信息枚举，标注错误信息。不包含消息体（message）
        @author zhangduanfeng
        @date 2019-08-26
        @since 1.0.0
        Enumerators:
        Unknown -- 未知错误
        NotFound -- 不存在
        Existed -- 已存在
        """

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ErrorCode.Unknown = ErrorCode("Unknown", 0)
    ErrorCode.NotFound = ErrorCode("NotFound", 1)
    ErrorCode.Existed = ErrorCode("Existed", 2)
    ErrorCode._enumerators = { 0:ErrorCode.Unknown, 1:ErrorCode.NotFound, 2:ErrorCode.Existed }

    _M_com.jimi.api._t_ErrorCode = IcePy.defineEnum('::com::jimi::api::ErrorCode', ErrorCode, (), ErrorCode._enumerators)

    _M_com.jimi.api.ErrorCode = ErrorCode
    del ErrorCode

if 'ApiException' not in _M_com.jimi.api.__dict__:
    _M_com.jimi.api.ApiException = Ice.createTempClass()
    class ApiException(Ice.UserException):
        """
        Api接口异常类
        @author zhangduanfeng
        @date 2019-08-26
        @since 1.0.0
        Members:
        errorCode -- 错误码，枚举。也可以string
        """
        def __init__(self, errorCode=_M_com.jimi.api.ErrorCode.Unknown):
            self.errorCode = errorCode

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::com::jimi::api::ApiException'

    _M_com.jimi.api._t_ApiException = IcePy.defineException('::com::jimi::api::ApiException', ApiException, (), False, None, (('errorCode', (), _M_com.jimi.api._t_ErrorCode, False, 0),))
    ApiException._ice_type = _M_com.jimi.api._t_ApiException

    _M_com.jimi.api.ApiException = ApiException
    del ApiException

if 'BaseInputDTO' not in _M_com.jimi.api.__dict__:
    _M_com.jimi.api.BaseInputDTO = Ice.createTempClass()
    class BaseInputDTO(Ice.Value):
        """
        参数输入DTO
        @author zhangduanfeng
        @date 2019-08-26
        @since 1.0.0
        Members:
        operator -- 操作人
        platform -- 平台code
        """
        def __init__(self, operator=0, platform=''):
            self.operator = operator
            self.platform = platform

        def ice_id(self):
            return '::com::jimi::api::BaseInputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::BaseInputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api._t_BaseInputDTO)

        __repr__ = __str__

    _M_com.jimi.api._t_BaseInputDTO = IcePy.defineValue('::com::jimi::api::BaseInputDTO', BaseInputDTO, -1, (), False, False, None, (
        ('operator', (), IcePy._t_long, False, 0),
        ('platform', (), IcePy._t_string, False, 0)
    ))
    BaseInputDTO._ice_type = _M_com.jimi.api._t_BaseInputDTO

    _M_com.jimi.api.BaseInputDTO = BaseInputDTO
    del BaseInputDTO

if 'BasePageInputDTO' not in _M_com.jimi.api.__dict__:
    _M_com.jimi.api.BasePageInputDTO = Ice.createTempClass()
    class BasePageInputDTO(_M_com.jimi.api.BaseInputDTO):
        """
        分页查询DTO
        @author zhangduanfeng
        @date 2019-08-26
        @since 1.0.0
        Members:
        page -- 页面
        size -- 
        """
        def __init__(self, operator=0, platform='', page=1, size=20):
            _M_com.jimi.api.BaseInputDTO.__init__(self, operator, platform)
            self.page = page
            self.size = size

        def ice_id(self):
            return '::com::jimi::api::BasePageInputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::BasePageInputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api._t_BasePageInputDTO)

        __repr__ = __str__

    _M_com.jimi.api._t_BasePageInputDTO = IcePy.defineValue('::com::jimi::api::BasePageInputDTO', BasePageInputDTO, -1, (), False, False, _M_com.jimi.api._t_BaseInputDTO, (
        ('page', (), IcePy._t_int, False, 0),
        ('size', (), IcePy._t_int, False, 0)
    ))
    BasePageInputDTO._ice_type = _M_com.jimi.api._t_BasePageInputDTO

    _M_com.jimi.api.BasePageInputDTO = BasePageInputDTO
    del BasePageInputDTO

if 'BaseOutputDTO' not in _M_com.jimi.api.__dict__:
    _M_com.jimi.api.BaseOutputDTO = Ice.createTempClass()
    class BaseOutputDTO(Ice.Value):
        """
        参数输出DTO
        @author zhangduanfeng
        @date 2019-08-26
        @since 1.0.0
        """
        def __init__(self):
            pass

        def ice_id(self):
            return '::com::jimi::api::BaseOutputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::BaseOutputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api._t_BaseOutputDTO)

        __repr__ = __str__

    _M_com.jimi.api._t_BaseOutputDTO = IcePy.defineValue('::com::jimi::api::BaseOutputDTO', BaseOutputDTO, -1, (), False, False, None, ())
    BaseOutputDTO._ice_type = _M_com.jimi.api._t_BaseOutputDTO

    _M_com.jimi.api.BaseOutputDTO = BaseOutputDTO
    del BaseOutputDTO

if 'CurrentAccount' not in _M_com.jimi.api.__dict__:
    _M_com.jimi.api.CurrentAccount = Ice.createTempClass()
    class CurrentAccount(Ice.Value):
        """
        当前会话账号信息
        @date 2019年8月22日 下午2:05:28
        @author yaojianping
        @version 1.0
        Members:
        uid -- 账号id
        oid -- 机构id
        platform -- 平台code
        """
        def __init__(self, uid=0, oid=0, platform=''):
            self.uid = uid
            self.oid = oid
            self.platform = platform

        def ice_id(self):
            return '::com::jimi::api::CurrentAccount'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::CurrentAccount'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api._t_CurrentAccount)

        __repr__ = __str__

    _M_com.jimi.api._t_CurrentAccount = IcePy.defineValue('::com::jimi::api::CurrentAccount', CurrentAccount, -1, (), False, False, None, (
        ('uid', (), IcePy._t_long, False, 0),
        ('oid', (), IcePy._t_long, False, 0),
        ('platform', (), IcePy._t_string, False, 0)
    ))
    CurrentAccount._ice_type = _M_com.jimi.api._t_CurrentAccount

    _M_com.jimi.api.CurrentAccount = CurrentAccount
    del CurrentAccount

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

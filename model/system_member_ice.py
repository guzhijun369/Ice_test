# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `system_member.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import system_member_dto_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')

# Included module com.jimi.api.user
_M_com.jimi.api.user = Ice.openModule('com.jimi.api.user')

# Included module com.jimi.api.user.system
_M_com.jimi.api.user.system = Ice.openModule('com.jimi.api.user.system')

# Included module com.jimi.api.user.system.constant
_M_com.jimi.api.user.system.constant = Ice.openModule('com.jimi.api.user.system.constant')

# Included module com.jimi.api.user.system.dto
_M_com.jimi.api.user.system.dto = Ice.openModule('com.jimi.api.user.system.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.api
__name__ = 'com.jimi.api'

# Start of module com.jimi.api.user
__name__ = 'com.jimi.api.user'

# Start of module com.jimi.api.user.system
__name__ = 'com.jimi.api.user.system'

_M_com.jimi.api.user.system._t_SystemMemberApi = IcePy.defineValue('::com::jimi::api::user::system::SystemMemberApi', Ice.Value, -1, (), False, True, None, ())

if 'SystemMemberApiPrx' not in _M_com.jimi.api.user.system.__dict__:
    _M_com.jimi.api.user.system.SystemMemberApiPrx = Ice.createTempClass()
    class SystemMemberApiPrx(Ice.ObjectPrx):

        """
        添加成员
        Arguments:
        AddMemberInputDTO -- 成员数据
        context -- The request context for the invocation.
        Returns: 添加成员状态
        """
        def addMember(self, AddMemberInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_addMember.invoke(self, ((AddMemberInputDTO, ), context))

        """
        添加成员
        Arguments:
        AddMemberInputDTO -- 成员数据
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addMemberAsync(self, AddMemberInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_addMember.invokeAsync(self, ((AddMemberInputDTO, ), context))

        """
        添加成员
        Arguments:
        AddMemberInputDTO -- 成员数据
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addMember(self, AddMemberInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_addMember.begin(self, ((AddMemberInputDTO, ), _response, _ex, _sent, context))

        """
        添加成员
        Arguments:
        AddMemberInputDTO -- 成员数据
        Returns: 添加成员状态
        """
        def end_addMember(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_addMember.end(self, _r)

        """
        更新成员信息
        Arguments:
        updateMemberInputDTO -- 更新成员数据
        context -- The request context for the invocation.
        Returns: 更新成员状态
        """
        def updateMember(self, updateMemberInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updateMember.invoke(self, ((updateMemberInputDTO, ), context))

        """
        更新成员信息
        Arguments:
        updateMemberInputDTO -- 更新成员数据
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateMemberAsync(self, updateMemberInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updateMember.invokeAsync(self, ((updateMemberInputDTO, ), context))

        """
        更新成员信息
        Arguments:
        updateMemberInputDTO -- 更新成员数据
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateMember(self, updateMemberInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updateMember.begin(self, ((updateMemberInputDTO, ), _response, _ex, _sent, context))

        """
        更新成员信息
        Arguments:
        updateMemberInputDTO -- 更新成员数据
        Returns: 更新成员状态
        """
        def end_updateMember(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updateMember.end(self, _r)

        """
        删除成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 删除成员状态
        """
        def deleteMember(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_deleteMember.invoke(self, ((id, operator), context))

        """
        删除成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteMemberAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_deleteMember.invokeAsync(self, ((id, operator), context))

        """
        删除成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteMember(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_deleteMember.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        删除成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        Returns: 删除成员状态
        """
        def end_deleteMember(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_deleteMember.end(self, _r)

        """
        认证成员
        Arguments:
        email -- 成员邮箱
        password -- 成员密码
        context -- The request context for the invocation.
        Returns: 成员数据
        """
        def loginAuth(self, email, password, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_loginAuth.invoke(self, ((email, password), context))

        """
        认证成员
        Arguments:
        email -- 成员邮箱
        password -- 成员密码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def loginAuthAsync(self, email, password, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_loginAuth.invokeAsync(self, ((email, password), context))

        """
        认证成员
        Arguments:
        email -- 成员邮箱
        password -- 成员密码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_loginAuth(self, email, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_loginAuth.begin(self, ((email, password), _response, _ex, _sent, context))

        """
        认证成员
        Arguments:
        email -- 成员邮箱
        password -- 成员密码
        Returns: 成员数据
        """
        def end_loginAuth(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_loginAuth.end(self, _r)

        """
        查询成员
        Arguments:
        id -- 成员ID
        context -- The request context for the invocation.
        Returns: 成员数据
        """
        def findById(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findById.invoke(self, ((id, ), context))

        """
        查询成员
        Arguments:
        id -- 成员ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByIdAsync(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findById.invokeAsync(self, ((id, ), context))

        """
        查询成员
        Arguments:
        id -- 成员ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        查询成员
        Arguments:
        id -- 成员ID
        Returns: 成员数据
        """
        def end_findById(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findById.end(self, _r)

        """
        更新成员密码
        Arguments:
        id -- 成员ID
        password -- 成员密码
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 更新成员密码状态
        """
        def updatePassword(self, id, password, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updatePassword.invoke(self, ((id, password, operator), context))

        """
        更新成员密码
        Arguments:
        id -- 成员ID
        password -- 成员密码
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePasswordAsync(self, id, password, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updatePassword.invokeAsync(self, ((id, password, operator), context))

        """
        更新成员密码
        Arguments:
        id -- 成员ID
        password -- 成员密码
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePassword(self, id, password, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updatePassword.begin(self, ((id, password, operator), _response, _ex, _sent, context))

        """
        更新成员密码
        Arguments:
        id -- 成员ID
        password -- 成员密码
        operator -- 操作者ID
        Returns: 更新成员密码状态
        """
        def end_updatePassword(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_updatePassword.end(self, _r)

        """
        重置成员密码
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 重置成员密码状态
        """
        def resetPassword(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_resetPassword.invoke(self, ((id, operator), context))

        """
        重置成员密码
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def resetPasswordAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_resetPassword.invokeAsync(self, ((id, operator), context))

        """
        重置成员密码
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_resetPassword(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_resetPassword.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        重置成员密码
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        Returns: 重置成员密码状态
        """
        def end_resetPassword(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_resetPassword.end(self, _r)

        """
        启用成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 启用成员状态
        """
        def enableMember(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_enableMember.invoke(self, ((id, operator), context))

        """
        启用成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def enableMemberAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_enableMember.invokeAsync(self, ((id, operator), context))

        """
        启用成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_enableMember(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_enableMember.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        启用成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        Returns: 启用成员状态
        """
        def end_enableMember(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_enableMember.end(self, _r)

        """
        关闭启动成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 关闭启动成员状态
        """
        def disableMember(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_disableMember.invoke(self, ((id, operator), context))

        """
        关闭启动成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disableMemberAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_disableMember.invokeAsync(self, ((id, operator), context))

        """
        关闭启动成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disableMember(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_disableMember.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        关闭启动成员
        Arguments:
        id -- 成员ID
        operator -- 操作者ID
        Returns: 关闭启动成员状态
        """
        def end_disableMember(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_disableMember.end(self, _r)

        """
        绑定成员到群组
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 绑定成员到群组状态
        """
        def bindGroup(self, uid, groupIdArr, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_bindGroup.invoke(self, ((uid, groupIdArr, operator), context))

        """
        绑定成员到群组
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def bindGroupAsync(self, uid, groupIdArr, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_bindGroup.invokeAsync(self, ((uid, groupIdArr, operator), context))

        """
        绑定成员到群组
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_bindGroup(self, uid, groupIdArr, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_bindGroup.begin(self, ((uid, groupIdArr, operator), _response, _ex, _sent, context))

        """
        绑定成员到群组
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        Returns: 绑定成员到群组状态
        """
        def end_bindGroup(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_bindGroup.end(self, _r)

        """
        解绑成员
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: 解绑成员状态
        """
        def unbindGroup(self, uid, groupIdArr, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_unbindGroup.invoke(self, ((uid, groupIdArr, operator), context))

        """
        解绑成员
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def unbindGroupAsync(self, uid, groupIdArr, operator, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_unbindGroup.invokeAsync(self, ((uid, groupIdArr, operator), context))

        """
        解绑成员
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_unbindGroup(self, uid, groupIdArr, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_unbindGroup.begin(self, ((uid, groupIdArr, operator), _response, _ex, _sent, context))

        """
        解绑成员
        Arguments:
        uid -- 成员ID
        groupIdArr -- 群组ID集合
        operator -- 操作者ID
        Returns: 解绑成员状态
        """
        def end_unbindGroup(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_unbindGroup.end(self, _r)

        """
        查找群组成员
        Arguments:
        groupId -- 群组ID
        context -- The request context for the invocation.
        Returns: 群组成员列表
        """
        def findByGroupId(self, groupId, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findByGroupId.invoke(self, ((groupId, ), context))

        """
        查找群组成员
        Arguments:
        groupId -- 群组ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByGroupIdAsync(self, groupId, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findByGroupId.invokeAsync(self, ((groupId, ), context))

        """
        查找群组成员
        Arguments:
        groupId -- 群组ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findByGroupId(self, groupId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findByGroupId.begin(self, ((groupId, ), _response, _ex, _sent, context))

        """
        查找群组成员
        Arguments:
        groupId -- 群组ID
        Returns: 群组成员列表
        """
        def end_findByGroupId(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findByGroupId.end(self, _r)

        """
        通过关键字查询成员信息
        Arguments:
        keyword -- 关键字
        context -- The request context for the invocation.
        Returns: 成员信息列表
        """
        def findList(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findList.invoke(self, ((keyword, ), context))

        """
        通过关键字查询成员信息
        Arguments:
        keyword -- 关键字
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findListAsync(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findList.invokeAsync(self, ((keyword, ), context))

        """
        通过关键字查询成员信息
        Arguments:
        keyword -- 关键字
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findList(self, keyword, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findList.begin(self, ((keyword, ), _response, _ex, _sent, context))

        """
        通过关键字查询成员信息
        Arguments:
        keyword -- 关键字
        Returns: 成员信息列表
        """
        def end_findList(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findList.end(self, _r)

        """
        通过关键字分页查询成员信息
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: 成员信息列表
        """
        def findPage(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findPage.invoke(self, ((keyword, pageNum, pageSize), context))

        """
        通过关键字分页查询成员信息
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findPageAsync(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findPage.invokeAsync(self, ((keyword, pageNum, pageSize), context))

        """
        通过关键字分页查询成员信息
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findPage(self, keyword, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findPage.begin(self, ((keyword, pageNum, pageSize), _response, _ex, _sent, context))

        """
        通过关键字分页查询成员信息
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        Returns: 成员信息列表
        """
        def end_findPage(self, _r):
            return _M_com.jimi.api.user.system.SystemMemberApi._op_findPage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.system.SystemMemberApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::system::SystemMemberApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.system.SystemMemberApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemMemberApi'
    _M_com.jimi.api.user.system._t_SystemMemberApiPrx = IcePy.defineProxy('::com::jimi::api::user::system::SystemMemberApi', SystemMemberApiPrx)

    _M_com.jimi.api.user.system.SystemMemberApiPrx = SystemMemberApiPrx
    del SystemMemberApiPrx

    _M_com.jimi.api.user.system.SystemMemberApi = Ice.createTempClass()
    class SystemMemberApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::system::SystemMemberApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::system::SystemMemberApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemMemberApi'

        def addMember(self, AddMemberInputDTO, current=None):
            """
            添加成员
            Arguments:
            AddMemberInputDTO -- 成员数据
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addMember' not implemented")

        def updateMember(self, updateMemberInputDTO, current=None):
            """
            更新成员信息
            Arguments:
            updateMemberInputDTO -- 更新成员数据
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateMember' not implemented")

        def deleteMember(self, id, operator, current=None):
            """
            删除成员
            Arguments:
            id -- 成员ID
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteMember' not implemented")

        def loginAuth(self, email, password, current=None):
            """
            认证成员
            Arguments:
            email -- 成员邮箱
            password -- 成员密码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'loginAuth' not implemented")

        def findById(self, id, current=None):
            """
            查询成员
            Arguments:
            id -- 成员ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findById' not implemented")

        def updatePassword(self, id, password, operator, current=None):
            """
            更新成员密码
            Arguments:
            id -- 成员ID
            password -- 成员密码
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePassword' not implemented")

        def resetPassword(self, id, operator, current=None):
            """
            重置成员密码
            Arguments:
            id -- 成员ID
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'resetPassword' not implemented")

        def enableMember(self, id, operator, current=None):
            """
            启用成员
            Arguments:
            id -- 成员ID
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'enableMember' not implemented")

        def disableMember(self, id, operator, current=None):
            """
            关闭启动成员
            Arguments:
            id -- 成员ID
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disableMember' not implemented")

        def bindGroup(self, uid, groupIdArr, operator, current=None):
            """
            绑定成员到群组
            Arguments:
            uid -- 成员ID
            groupIdArr -- 群组ID集合
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'bindGroup' not implemented")

        def unbindGroup(self, uid, groupIdArr, operator, current=None):
            """
            解绑成员
            Arguments:
            uid -- 成员ID
            groupIdArr -- 群组ID集合
            operator -- 操作者ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'unbindGroup' not implemented")

        def findByGroupId(self, groupId, current=None):
            """
            查找群组成员
            Arguments:
            groupId -- 群组ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findByGroupId' not implemented")

        def findList(self, keyword, current=None):
            """
            通过关键字查询成员信息
            Arguments:
            keyword -- 关键字
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findList' not implemented")

        def findPage(self, keyword, pageNum, pageSize, current=None):
            """
            通过关键字分页查询成员信息
            Arguments:
            keyword -- 关键字
            pageNum -- 页数
            pageSize -- 每页数据大小
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findPage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.system._t_SystemMemberApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.system._t_SystemMemberApiDisp = IcePy.defineClass('::com::jimi::api::user::system::SystemMemberApi', SystemMemberApi, (), None, ())
    SystemMemberApi._ice_type = _M_com.jimi.api.user.system._t_SystemMemberApiDisp

    SystemMemberApi._op_addMember = IcePy.Operation('addMember', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_AddMemberInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_updateMember = IcePy.Operation('updateMember', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_UpdateMemberInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_deleteMember = IcePy.Operation('deleteMember', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_loginAuth = IcePy.Operation('loginAuth', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_com.jimi.api.user.system.dto._t_MemberOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_findById = IcePy.Operation('findById', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_MemberOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_updatePassword = IcePy.Operation('updatePassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_resetPassword = IcePy.Operation('resetPassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_enableMember = IcePy.Operation('enableMember', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_disableMember = IcePy.Operation('disableMember', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_bindGroup = IcePy.Operation('bindGroup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), _M_com.jimi.api.user.system.dto._t_GroupIdArr, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_unbindGroup = IcePy.Operation('unbindGroup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), _M_com.jimi.api.user.system.dto._t_GroupIdArr, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_findByGroupId = IcePy.Operation('findByGroupId', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_MemberListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_findList = IcePy.Operation('findList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_MemberListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemMemberApi._op_findPage = IcePy.Operation('findPage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.api.user.system.dto._t_MemberListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.system.SystemMemberApi = SystemMemberApi
    del SystemMemberApi

_M_com.jimi.api.user.system._t_SystemGroupApi = IcePy.defineValue('::com::jimi::api::user::system::SystemGroupApi', Ice.Value, -1, (), False, True, None, ())

if 'SystemGroupApiPrx' not in _M_com.jimi.api.user.system.__dict__:
    _M_com.jimi.api.user.system.SystemGroupApiPrx = Ice.createTempClass()
    class SystemGroupApiPrx(Ice.ObjectPrx):

        """
        添加群组
        Arguments:
        addSystemGroupInputDTO -- 群组输入参数
        context -- The request context for the invocation.
        Returns: 添加群组状态
        """
        def addSystemGroup(self, addSystemGroupInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_addSystemGroup.invoke(self, ((addSystemGroupInputDTO, ), context))

        """
        添加群组
        Arguments:
        addSystemGroupInputDTO -- 群组输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addSystemGroupAsync(self, addSystemGroupInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_addSystemGroup.invokeAsync(self, ((addSystemGroupInputDTO, ), context))

        """
        添加群组
        Arguments:
        addSystemGroupInputDTO -- 群组输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addSystemGroup(self, addSystemGroupInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_addSystemGroup.begin(self, ((addSystemGroupInputDTO, ), _response, _ex, _sent, context))

        """
        添加群组
        Arguments:
        addSystemGroupInputDTO -- 群组输入参数
        Returns: 添加群组状态
        """
        def end_addSystemGroup(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_addSystemGroup.end(self, _r)

        """
        更新系统群组信息
        Arguments:
        updateSystemGroupInputDTO -- 群组输入参数
        context -- The request context for the invocation.
        Returns: 更新系统群组信息状态
        """
        def updateSystemGroup(self, updateSystemGroupInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_updateSystemGroup.invoke(self, ((updateSystemGroupInputDTO, ), context))

        """
        更新系统群组信息
        Arguments:
        updateSystemGroupInputDTO -- 群组输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateSystemGroupAsync(self, updateSystemGroupInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_updateSystemGroup.invokeAsync(self, ((updateSystemGroupInputDTO, ), context))

        """
        更新系统群组信息
        Arguments:
        updateSystemGroupInputDTO -- 群组输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateSystemGroup(self, updateSystemGroupInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_updateSystemGroup.begin(self, ((updateSystemGroupInputDTO, ), _response, _ex, _sent, context))

        """
        更新系统群组信息
        Arguments:
        updateSystemGroupInputDTO -- 群组输入参数
        Returns: 更新系统群组信息状态
        """
        def end_updateSystemGroup(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_updateSystemGroup.end(self, _r)

        """
        删除群组
        Arguments:
        id -- 群组ID
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 删除群组状态
        """
        def deleteSystemGroup(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_deleteSystemGroup.invoke(self, ((id, operator), context))

        """
        删除群组
        Arguments:
        id -- 群组ID
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteSystemGroupAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_deleteSystemGroup.invokeAsync(self, ((id, operator), context))

        """
        删除群组
        Arguments:
        id -- 群组ID
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteSystemGroup(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_deleteSystemGroup.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        删除群组
        Arguments:
        id -- 群组ID
        operator -- 操作者
        Returns: 删除群组状态
        """
        def end_deleteSystemGroup(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_deleteSystemGroup.end(self, _r)

        """
        关联群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 关联群组角色状态
        """
        def bindRole(self, groupId, roleIds, operator, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_bindRole.invoke(self, ((groupId, roleIds, operator), context))

        """
        关联群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def bindRoleAsync(self, groupId, roleIds, operator, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_bindRole.invokeAsync(self, ((groupId, roleIds, operator), context))

        """
        关联群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_bindRole(self, groupId, roleIds, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_bindRole.begin(self, ((groupId, roleIds, operator), _response, _ex, _sent, context))

        """
        关联群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        Returns: 关联群组角色状态
        """
        def end_bindRole(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_bindRole.end(self, _r)

        """
        解绑群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 添加用户状态
        """
        def unbinRole(self, groupId, roleIds, operator, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_unbinRole.invoke(self, ((groupId, roleIds, operator), context))

        """
        解绑群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def unbinRoleAsync(self, groupId, roleIds, operator, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_unbinRole.invokeAsync(self, ((groupId, roleIds, operator), context))

        """
        解绑群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_unbinRole(self, groupId, roleIds, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_unbinRole.begin(self, ((groupId, roleIds, operator), _response, _ex, _sent, context))

        """
        解绑群组角色
        Arguments:
        groupId -- 群组ID
        roleIds -- 角色ID集合
        operator -- 操作者
        Returns: 添加用户状态
        """
        def end_unbinRole(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_unbinRole.end(self, _r)

        """
        查找群组信息
        Arguments:
        id -- 群组ID
        context -- The request context for the invocation.
        Returns: 群组信息
        """
        def findById(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findById.invoke(self, ((id, ), context))

        """
        查找群组信息
        Arguments:
        id -- 群组ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByIdAsync(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findById.invokeAsync(self, ((id, ), context))

        """
        查找群组信息
        Arguments:
        id -- 群组ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        查找群组信息
        Arguments:
        id -- 群组ID
        Returns: 群组信息
        """
        def end_findById(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findById.end(self, _r)

        """
        获取群组列表
        Arguments:
        keyword -- 搜索关键字
        context -- The request context for the invocation.
        Returns: 群组列表
        """
        def findList(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findList.invoke(self, ((keyword, ), context))

        """
        获取群组列表
        Arguments:
        keyword -- 搜索关键字
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findListAsync(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findList.invokeAsync(self, ((keyword, ), context))

        """
        获取群组列表
        Arguments:
        keyword -- 搜索关键字
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findList(self, keyword, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findList.begin(self, ((keyword, ), _response, _ex, _sent, context))

        """
        获取群组列表
        Arguments:
        keyword -- 搜索关键字
        Returns: 群组列表
        """
        def end_findList(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findList.end(self, _r)

        """
        分页获取群组列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: 成员信息列表
        """
        def findPage(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findPage.invoke(self, ((keyword, pageNum, pageSize), context))

        """
        分页获取群组列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findPageAsync(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findPage.invokeAsync(self, ((keyword, pageNum, pageSize), context))

        """
        分页获取群组列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findPage(self, keyword, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findPage.begin(self, ((keyword, pageNum, pageSize), _response, _ex, _sent, context))

        """
        分页获取群组列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        Returns: 成员信息列表
        """
        def end_findPage(self, _r):
            return _M_com.jimi.api.user.system.SystemGroupApi._op_findPage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.system.SystemGroupApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::system::SystemGroupApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.system.SystemGroupApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemGroupApi'
    _M_com.jimi.api.user.system._t_SystemGroupApiPrx = IcePy.defineProxy('::com::jimi::api::user::system::SystemGroupApi', SystemGroupApiPrx)

    _M_com.jimi.api.user.system.SystemGroupApiPrx = SystemGroupApiPrx
    del SystemGroupApiPrx

    _M_com.jimi.api.user.system.SystemGroupApi = Ice.createTempClass()
    class SystemGroupApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::system::SystemGroupApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::system::SystemGroupApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemGroupApi'

        def addSystemGroup(self, addSystemGroupInputDTO, current=None):
            """
            添加群组
            Arguments:
            addSystemGroupInputDTO -- 群组输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addSystemGroup' not implemented")

        def updateSystemGroup(self, updateSystemGroupInputDTO, current=None):
            """
            更新系统群组信息
            Arguments:
            updateSystemGroupInputDTO -- 群组输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateSystemGroup' not implemented")

        def deleteSystemGroup(self, id, operator, current=None):
            """
            删除群组
            Arguments:
            id -- 群组ID
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteSystemGroup' not implemented")

        def bindRole(self, groupId, roleIds, operator, current=None):
            """
            关联群组角色
            Arguments:
            groupId -- 群组ID
            roleIds -- 角色ID集合
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'bindRole' not implemented")

        def unbinRole(self, groupId, roleIds, operator, current=None):
            """
            解绑群组角色
            Arguments:
            groupId -- 群组ID
            roleIds -- 角色ID集合
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'unbinRole' not implemented")

        def findById(self, id, current=None):
            """
            查找群组信息
            Arguments:
            id -- 群组ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findById' not implemented")

        def findList(self, keyword, current=None):
            """
            获取群组列表
            Arguments:
            keyword -- 搜索关键字
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findList' not implemented")

        def findPage(self, keyword, pageNum, pageSize, current=None):
            """
            分页获取群组列表
            Arguments:
            keyword -- 关键字
            pageNum -- 页数
            pageSize -- 每页数据大小
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findPage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.system._t_SystemGroupApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.system._t_SystemGroupApiDisp = IcePy.defineClass('::com::jimi::api::user::system::SystemGroupApi', SystemGroupApi, (), None, ())
    SystemGroupApi._ice_type = _M_com.jimi.api.user.system._t_SystemGroupApiDisp

    SystemGroupApi._op_addSystemGroup = IcePy.Operation('addSystemGroup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_AddSystemGroupInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_updateSystemGroup = IcePy.Operation('updateSystemGroup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_UpdateSystemGroupInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_deleteSystemGroup = IcePy.Operation('deleteSystemGroup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_bindRole = IcePy.Operation('bindRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_com.jimi.api.user.system.dto._t_RoleIdArr, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_unbinRole = IcePy.Operation('unbinRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_com.jimi.api.user.system.dto._t_RoleIdArr, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_findById = IcePy.Operation('findById', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_SystemGroupOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_findList = IcePy.Operation('findList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_GroupListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemGroupApi._op_findPage = IcePy.Operation('findPage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.api.user.system.dto._t_GroupListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.system.SystemGroupApi = SystemGroupApi
    del SystemGroupApi

_M_com.jimi.api.user.system._t_SystemRoleApi = IcePy.defineValue('::com::jimi::api::user::system::SystemRoleApi', Ice.Value, -1, (), False, True, None, ())

if 'SystemRoleApiPrx' not in _M_com.jimi.api.user.system.__dict__:
    _M_com.jimi.api.user.system.SystemRoleApiPrx = Ice.createTempClass()
    class SystemRoleApiPrx(Ice.ObjectPrx):

        """
        添加角色
        Arguments:
        addSystemRoleInputDTO -- 角色输入信息
        context -- The request context for the invocation.
        Returns: 添加角色状态
        """
        def addSystemRole(self, addSystemRoleInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_addSystemRole.invoke(self, ((addSystemRoleInputDTO, ), context))

        """
        添加角色
        Arguments:
        addSystemRoleInputDTO -- 角色输入信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addSystemRoleAsync(self, addSystemRoleInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_addSystemRole.invokeAsync(self, ((addSystemRoleInputDTO, ), context))

        """
        添加角色
        Arguments:
        addSystemRoleInputDTO -- 角色输入信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addSystemRole(self, addSystemRoleInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_addSystemRole.begin(self, ((addSystemRoleInputDTO, ), _response, _ex, _sent, context))

        """
        添加角色
        Arguments:
        addSystemRoleInputDTO -- 角色输入信息
        Returns: 添加角色状态
        """
        def end_addSystemRole(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_addSystemRole.end(self, _r)

        """
        更新角色
        Arguments:
        updateSystemRoleInputDTO -- 更新角色输入信息
        context -- The request context for the invocation.
        Returns: 更新角色状态
        """
        def updateSystemRole(self, updateSystemRoleInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_updateSystemRole.invoke(self, ((updateSystemRoleInputDTO, ), context))

        """
        更新角色
        Arguments:
        updateSystemRoleInputDTO -- 更新角色输入信息
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateSystemRoleAsync(self, updateSystemRoleInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_updateSystemRole.invokeAsync(self, ((updateSystemRoleInputDTO, ), context))

        """
        更新角色
        Arguments:
        updateSystemRoleInputDTO -- 更新角色输入信息
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateSystemRole(self, updateSystemRoleInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_updateSystemRole.begin(self, ((updateSystemRoleInputDTO, ), _response, _ex, _sent, context))

        """
        更新角色
        Arguments:
        updateSystemRoleInputDTO -- 更新角色输入信息
        Returns: 更新角色状态
        """
        def end_updateSystemRole(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_updateSystemRole.end(self, _r)

        """
        删除角色
        Arguments:
        id -- 角色ID
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 删除角色状态
        """
        def deleteSystemRole(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_deleteSystemRole.invoke(self, ((id, operator), context))

        """
        删除角色
        Arguments:
        id -- 角色ID
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteSystemRoleAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_deleteSystemRole.invokeAsync(self, ((id, operator), context))

        """
        删除角色
        Arguments:
        id -- 角色ID
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteSystemRole(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_deleteSystemRole.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        删除角色
        Arguments:
        id -- 角色ID
        operator -- 操作者
        Returns: 删除角色状态
        """
        def end_deleteSystemRole(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_deleteSystemRole.end(self, _r)

        """
        获取角色信息
        Arguments:
        id -- 角色ID
        context -- The request context for the invocation.
        Returns: 角色信息
        """
        def findById(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findById.invoke(self, ((id, ), context))

        """
        获取角色信息
        Arguments:
        id -- 角色ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByIdAsync(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findById.invokeAsync(self, ((id, ), context))

        """
        获取角色信息
        Arguments:
        id -- 角色ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        获取角色信息
        Arguments:
        id -- 角色ID
        Returns: 角色信息
        """
        def end_findById(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findById.end(self, _r)

        """
        获取角色列表
        Arguments:
        keyword -- 搜索关键字
        context -- The request context for the invocation.
        Returns: 角色列表
        """
        def findList(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findList.invoke(self, ((keyword, ), context))

        """
        获取角色列表
        Arguments:
        keyword -- 搜索关键字
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findListAsync(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findList.invokeAsync(self, ((keyword, ), context))

        """
        获取角色列表
        Arguments:
        keyword -- 搜索关键字
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findList(self, keyword, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findList.begin(self, ((keyword, ), _response, _ex, _sent, context))

        """
        获取角色列表
        Arguments:
        keyword -- 搜索关键字
        Returns: 角色列表
        """
        def end_findList(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findList.end(self, _r)

        """
        分页获取角色列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: 角色列表
        """
        def findPage(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findPage.invoke(self, ((keyword, pageNum, pageSize), context))

        """
        分页获取角色列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findPageAsync(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findPage.invokeAsync(self, ((keyword, pageNum, pageSize), context))

        """
        分页获取角色列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findPage(self, keyword, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findPage.begin(self, ((keyword, pageNum, pageSize), _response, _ex, _sent, context))

        """
        分页获取角色列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        Returns: 角色列表
        """
        def end_findPage(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_findPage.end(self, _r)

        """
        角色绑定权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 角色绑定权限状态
        """
        def bindPermission(self, roleId, permissions, operator, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_bindPermission.invoke(self, ((roleId, permissions, operator), context))

        """
        角色绑定权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def bindPermissionAsync(self, roleId, permissions, operator, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_bindPermission.invokeAsync(self, ((roleId, permissions, operator), context))

        """
        角色绑定权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_bindPermission(self, roleId, permissions, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_bindPermission.begin(self, ((roleId, permissions, operator), _response, _ex, _sent, context))

        """
        角色绑定权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        Returns: 角色绑定权限状态
        """
        def end_bindPermission(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_bindPermission.end(self, _r)

        """
        解绑角色权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 角色绑定权限状态
        """
        def unbindPermission(self, roleId, permissions, operator, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_unbindPermission.invoke(self, ((roleId, permissions, operator), context))

        """
        解绑角色权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def unbindPermissionAsync(self, roleId, permissions, operator, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_unbindPermission.invokeAsync(self, ((roleId, permissions, operator), context))

        """
        解绑角色权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_unbindPermission(self, roleId, permissions, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_unbindPermission.begin(self, ((roleId, permissions, operator), _response, _ex, _sent, context))

        """
        解绑角色权限
        Arguments:
        roleId -- 角色ID
        permissions -- 权限ID集合
        operator -- 操作者
        Returns: 角色绑定权限状态
        """
        def end_unbindPermission(self, _r):
            return _M_com.jimi.api.user.system.SystemRoleApi._op_unbindPermission.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.system.SystemRoleApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::system::SystemRoleApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.system.SystemRoleApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemRoleApi'
    _M_com.jimi.api.user.system._t_SystemRoleApiPrx = IcePy.defineProxy('::com::jimi::api::user::system::SystemRoleApi', SystemRoleApiPrx)

    _M_com.jimi.api.user.system.SystemRoleApiPrx = SystemRoleApiPrx
    del SystemRoleApiPrx

    _M_com.jimi.api.user.system.SystemRoleApi = Ice.createTempClass()
    class SystemRoleApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::system::SystemRoleApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::system::SystemRoleApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemRoleApi'

        def addSystemRole(self, addSystemRoleInputDTO, current=None):
            """
            添加角色
            Arguments:
            addSystemRoleInputDTO -- 角色输入信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addSystemRole' not implemented")

        def updateSystemRole(self, updateSystemRoleInputDTO, current=None):
            """
            更新角色
            Arguments:
            updateSystemRoleInputDTO -- 更新角色输入信息
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateSystemRole' not implemented")

        def deleteSystemRole(self, id, operator, current=None):
            """
            删除角色
            Arguments:
            id -- 角色ID
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteSystemRole' not implemented")

        def findById(self, id, current=None):
            """
            获取角色信息
            Arguments:
            id -- 角色ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findById' not implemented")

        def findList(self, keyword, current=None):
            """
            获取角色列表
            Arguments:
            keyword -- 搜索关键字
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findList' not implemented")

        def findPage(self, keyword, pageNum, pageSize, current=None):
            """
            分页获取角色列表
            Arguments:
            keyword -- 关键字
            pageNum -- 页数
            pageSize -- 每页数据大小
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findPage' not implemented")

        def bindPermission(self, roleId, permissions, operator, current=None):
            """
            角色绑定权限
            Arguments:
            roleId -- 角色ID
            permissions -- 权限ID集合
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'bindPermission' not implemented")

        def unbindPermission(self, roleId, permissions, operator, current=None):
            """
            解绑角色权限
            Arguments:
            roleId -- 角色ID
            permissions -- 权限ID集合
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'unbindPermission' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.system._t_SystemRoleApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.system._t_SystemRoleApiDisp = IcePy.defineClass('::com::jimi::api::user::system::SystemRoleApi', SystemRoleApi, (), None, ())
    SystemRoleApi._ice_type = _M_com.jimi.api.user.system._t_SystemRoleApiDisp

    SystemRoleApi._op_addSystemRole = IcePy.Operation('addSystemRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_AddSystemRoleInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_updateSystemRole = IcePy.Operation('updateSystemRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_UpdateSystemRoleInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_deleteSystemRole = IcePy.Operation('deleteSystemRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_findById = IcePy.Operation('findById', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_SystemRoleOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_findList = IcePy.Operation('findList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_SystemRoleListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_findPage = IcePy.Operation('findPage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.api.user.system.dto._t_SystemRoleListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_bindPermission = IcePy.Operation('bindPermission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_com.jimi.api.user.system.dto._t_PermissionIdArr, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemRoleApi._op_unbindPermission = IcePy.Operation('unbindPermission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_com.jimi.api.user.system.dto._t_PermissionIdArr, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.system.SystemRoleApi = SystemRoleApi
    del SystemRoleApi

_M_com.jimi.api.user.system._t_SystemPermissionApi = IcePy.defineValue('::com::jimi::api::user::system::SystemPermissionApi', Ice.Value, -1, (), False, True, None, ())

if 'SystemPermissionApiPrx' not in _M_com.jimi.api.user.system.__dict__:
    _M_com.jimi.api.user.system.SystemPermissionApiPrx = Ice.createTempClass()
    class SystemPermissionApiPrx(Ice.ObjectPrx):

        """
        添加系统权限
        Arguments:
        addSystemPermissionInputDTO -- 权限数据输入参数
        context -- The request context for the invocation.
        Returns: 添加系统权限状态
        """
        def addSystemPermission(self, addSystemPermissionInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_addSystemPermission.invoke(self, ((addSystemPermissionInputDTO, ), context))

        """
        添加系统权限
        Arguments:
        addSystemPermissionInputDTO -- 权限数据输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addSystemPermissionAsync(self, addSystemPermissionInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_addSystemPermission.invokeAsync(self, ((addSystemPermissionInputDTO, ), context))

        """
        添加系统权限
        Arguments:
        addSystemPermissionInputDTO -- 权限数据输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addSystemPermission(self, addSystemPermissionInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_addSystemPermission.begin(self, ((addSystemPermissionInputDTO, ), _response, _ex, _sent, context))

        """
        添加系统权限
        Arguments:
        addSystemPermissionInputDTO -- 权限数据输入参数
        Returns: 添加系统权限状态
        """
        def end_addSystemPermission(self, _r):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_addSystemPermission.end(self, _r)

        """
        更新权限数据
        Arguments:
        updateSystemPermissionInputDTO -- 权限数据输入参数
        context -- The request context for the invocation.
        Returns: 更新权限数据状态
        """
        def updateSystemPermission(self, updateSystemPermissionInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_updateSystemPermission.invoke(self, ((updateSystemPermissionInputDTO, ), context))

        """
        更新权限数据
        Arguments:
        updateSystemPermissionInputDTO -- 权限数据输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateSystemPermissionAsync(self, updateSystemPermissionInputDTO, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_updateSystemPermission.invokeAsync(self, ((updateSystemPermissionInputDTO, ), context))

        """
        更新权限数据
        Arguments:
        updateSystemPermissionInputDTO -- 权限数据输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateSystemPermission(self, updateSystemPermissionInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_updateSystemPermission.begin(self, ((updateSystemPermissionInputDTO, ), _response, _ex, _sent, context))

        """
        更新权限数据
        Arguments:
        updateSystemPermissionInputDTO -- 权限数据输入参数
        Returns: 更新权限数据状态
        """
        def end_updateSystemPermission(self, _r):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_updateSystemPermission.end(self, _r)

        """
        删除系统权限
        Arguments:
        id -- 权限ID
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: 删除系统权限状态
        """
        def deleteSystemPermission(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_deleteSystemPermission.invoke(self, ((id, operator), context))

        """
        删除系统权限
        Arguments:
        id -- 权限ID
        operator -- 操作者
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteSystemPermissionAsync(self, id, operator, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_deleteSystemPermission.invokeAsync(self, ((id, operator), context))

        """
        删除系统权限
        Arguments:
        id -- 权限ID
        operator -- 操作者
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteSystemPermission(self, id, operator, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_deleteSystemPermission.begin(self, ((id, operator), _response, _ex, _sent, context))

        """
        删除系统权限
        Arguments:
        id -- 权限ID
        operator -- 操作者
        Returns: 删除系统权限状态
        """
        def end_deleteSystemPermission(self, _r):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_deleteSystemPermission.end(self, _r)

        """
        获取权限信息
        Arguments:
        id -- 角色ID
        context -- The request context for the invocation.
        Returns: 权限信息数据
        """
        def findById(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findById.invoke(self, ((id, ), context))

        """
        获取权限信息
        Arguments:
        id -- 角色ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByIdAsync(self, id, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findById.invokeAsync(self, ((id, ), context))

        """
        获取权限信息
        Arguments:
        id -- 角色ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        获取权限信息
        Arguments:
        id -- 角色ID
        Returns: 权限信息数据
        """
        def end_findById(self, _r):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findById.end(self, _r)

        """
        获取权限列表
        Arguments:
        keyword -- 搜索关键字
        context -- The request context for the invocation.
        Returns: 权限列表
        """
        def findList(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findList.invoke(self, ((keyword, ), context))

        """
        获取权限列表
        Arguments:
        keyword -- 搜索关键字
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findListAsync(self, keyword, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findList.invokeAsync(self, ((keyword, ), context))

        """
        获取权限列表
        Arguments:
        keyword -- 搜索关键字
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findList(self, keyword, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findList.begin(self, ((keyword, ), _response, _ex, _sent, context))

        """
        获取权限列表
        Arguments:
        keyword -- 搜索关键字
        Returns: 权限列表
        """
        def end_findList(self, _r):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findList.end(self, _r)

        """
        分页获取权限列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: 权限列表
        """
        def findPage(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findPage.invoke(self, ((keyword, pageNum, pageSize), context))

        """
        分页获取权限列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findPageAsync(self, keyword, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findPage.invokeAsync(self, ((keyword, pageNum, pageSize), context))

        """
        分页获取权限列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findPage(self, keyword, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findPage.begin(self, ((keyword, pageNum, pageSize), _response, _ex, _sent, context))

        """
        分页获取权限列表
        Arguments:
        keyword -- 关键字
        pageNum -- 页数
        pageSize -- 每页数据大小
        Returns: 权限列表
        """
        def end_findPage(self, _r):
            return _M_com.jimi.api.user.system.SystemPermissionApi._op_findPage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.system.SystemPermissionApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::system::SystemPermissionApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.system.SystemPermissionApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemPermissionApi'
    _M_com.jimi.api.user.system._t_SystemPermissionApiPrx = IcePy.defineProxy('::com::jimi::api::user::system::SystemPermissionApi', SystemPermissionApiPrx)

    _M_com.jimi.api.user.system.SystemPermissionApiPrx = SystemPermissionApiPrx
    del SystemPermissionApiPrx

    _M_com.jimi.api.user.system.SystemPermissionApi = Ice.createTempClass()
    class SystemPermissionApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::system::SystemPermissionApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::system::SystemPermissionApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::system::SystemPermissionApi'

        def addSystemPermission(self, addSystemPermissionInputDTO, current=None):
            """
            添加系统权限
            Arguments:
            addSystemPermissionInputDTO -- 权限数据输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addSystemPermission' not implemented")

        def updateSystemPermission(self, updateSystemPermissionInputDTO, current=None):
            """
            更新权限数据
            Arguments:
            updateSystemPermissionInputDTO -- 权限数据输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateSystemPermission' not implemented")

        def deleteSystemPermission(self, id, operator, current=None):
            """
            删除系统权限
            Arguments:
            id -- 权限ID
            operator -- 操作者
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteSystemPermission' not implemented")

        def findById(self, id, current=None):
            """
            获取权限信息
            Arguments:
            id -- 角色ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findById' not implemented")

        def findList(self, keyword, current=None):
            """
            获取权限列表
            Arguments:
            keyword -- 搜索关键字
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findList' not implemented")

        def findPage(self, keyword, pageNum, pageSize, current=None):
            """
            分页获取权限列表
            Arguments:
            keyword -- 关键字
            pageNum -- 页数
            pageSize -- 每页数据大小
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findPage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.system._t_SystemPermissionApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.system._t_SystemPermissionApiDisp = IcePy.defineClass('::com::jimi::api::user::system::SystemPermissionApi', SystemPermissionApi, (), None, ())
    SystemPermissionApi._ice_type = _M_com.jimi.api.user.system._t_SystemPermissionApiDisp

    SystemPermissionApi._op_addSystemPermission = IcePy.Operation('addSystemPermission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_AddSystemPermissionInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemPermissionApi._op_updateSystemPermission = IcePy.Operation('updateSystemPermission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.system.dto._t_UpdateSystemPermissionInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemPermissionApi._op_deleteSystemPermission = IcePy.Operation('deleteSystemPermission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemPermissionApi._op_findById = IcePy.Operation('findById', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_SystemPermissionOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemPermissionApi._op_findList = IcePy.Operation('findList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.system.dto._t_SystemPermissionListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    SystemPermissionApi._op_findPage = IcePy.Operation('findPage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.api.user.system.dto._t_SystemPermissionListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.system.SystemPermissionApi = SystemPermissionApi
    del SystemPermissionApi

# End of module com.jimi.api.user.system

__name__ = 'com.jimi.api.user'

# End of module com.jimi.api.user

__name__ = 'com.jimi.api'

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `appuser.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')
__name__ = 'com.jimi'

# Start of module com.jimi.user
_M_com.jimi.user = Ice.openModule('com.jimi.user')
__name__ = 'com.jimi.user'

# Start of module com.jimi.user.api
_M_com.jimi.user.api = Ice.openModule('com.jimi.user.api')
__name__ = 'com.jimi.user.api'

# Start of module com.jimi.user.api.app
_M_com.jimi.user.api.app = Ice.openModule('com.jimi.user.api.app')
__name__ = 'com.jimi.user.api.app'

# Start of module com.jimi.user.api.app.dto
_M_com.jimi.user.api.app.dto = Ice.openModule('com.jimi.user.api.app.dto')
__name__ = 'com.jimi.user.api.app.dto'

if 'AppUserOutputDTO' not in _M_com.jimi.user.api.app.dto.__dict__:
    _M_com.jimi.user.api.app.dto.AppUserOutputDTO = Ice.createTempClass()
    class AppUserOutputDTO(Ice.Value):
        """
        用户数据输出参数
        @date 2019年8月23日 上午10:05:28
        @author wangke
        @version 1.0
        Members:
        id -- 用户ID
        phone -- 用户手机号
        nickName -- 用户昵称
        enableFlag -- 用户账号是否启用
        gmtCreate -- 创建日期
        gmtModified -- 更新日期
        """
        def __init__(self, id='', phone='', nickName='', enableFlag=False, gmtCreate=0, gmtModified=0):
            self.id = id
            self.phone = phone
            self.nickName = nickName
            self.enableFlag = enableFlag
            self.gmtCreate = gmtCreate
            self.gmtModified = gmtModified

        def ice_id(self):
            return '::com::jimi::user::api::app::dto::AppUserOutputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::app::dto::AppUserOutputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.user.api.app.dto._t_AppUserOutputDTO)

        __repr__ = __str__

    _M_com.jimi.user.api.app.dto._t_AppUserOutputDTO = IcePy.defineValue('::com::jimi::user::api::app::dto::AppUserOutputDTO', AppUserOutputDTO, -1, (), False, False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('phone', (), IcePy._t_string, False, 0),
        ('nickName', (), IcePy._t_string, False, 0),
        ('enableFlag', (), IcePy._t_bool, False, 0),
        ('gmtCreate', (), IcePy._t_long, False, 0),
        ('gmtModified', (), IcePy._t_long, False, 0)
    ))
    AppUserOutputDTO._ice_type = _M_com.jimi.user.api.app.dto._t_AppUserOutputDTO

    _M_com.jimi.user.api.app.dto.AppUserOutputDTO = AppUserOutputDTO
    del AppUserOutputDTO

if '_t_AppUserListOutputDTO' not in _M_com.jimi.user.api.app.dto.__dict__:
    _M_com.jimi.user.api.app.dto._t_AppUserListOutputDTO = IcePy.defineSequence('::com::jimi::user::api::app::dto::AppUserListOutputDTO', (), _M_com.jimi.user.api.app.dto._t_AppUserOutputDTO)

if 'AddAppUserInputDTO' not in _M_com.jimi.user.api.app.dto.__dict__:
    _M_com.jimi.user.api.app.dto.AddAppUserInputDTO = Ice.createTempClass()
    class AddAppUserInputDTO(Ice.Value):
        """
        用户输入数据参数
        @date 2019年8月23日 上午10:05:28
        @author wangke
        @version 1.0
        Members:
        phone -- 用户手机号
        nickName -- 用户昵称
        password -- 用户密码
        """
        def __init__(self, phone='', nickName='', password=''):
            self.phone = phone
            self.nickName = nickName
            self.password = password

        def ice_id(self):
            return '::com::jimi::user::api::app::dto::AddAppUserInputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::app::dto::AddAppUserInputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.user.api.app.dto._t_AddAppUserInputDTO)

        __repr__ = __str__

    _M_com.jimi.user.api.app.dto._t_AddAppUserInputDTO = IcePy.defineValue('::com::jimi::user::api::app::dto::AddAppUserInputDTO', AddAppUserInputDTO, -1, (), False, False, None, (
        ('phone', (), IcePy._t_string, False, 0),
        ('nickName', (), IcePy._t_string, False, 0),
        ('password', (), IcePy._t_string, False, 0)
    ))
    AddAppUserInputDTO._ice_type = _M_com.jimi.user.api.app.dto._t_AddAppUserInputDTO

    _M_com.jimi.user.api.app.dto.AddAppUserInputDTO = AddAppUserInputDTO
    del AddAppUserInputDTO

if 'UpdateAppUserInputDTO' not in _M_com.jimi.user.api.app.dto.__dict__:
    _M_com.jimi.user.api.app.dto.UpdateAppUserInputDTO = Ice.createTempClass()
    class UpdateAppUserInputDTO(Ice.Value):
        """
        更新用户数据输入参数
        @date 2019年8月23日 上午10:05:28
        @author wangke
        @version 1.0
        Members:
        id -- 用户ID
        nickName -- 用户昵称
        """
        def __init__(self, id='', nickName=''):
            self.id = id
            self.nickName = nickName

        def ice_id(self):
            return '::com::jimi::user::api::app::dto::UpdateAppUserInputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::app::dto::UpdateAppUserInputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.user.api.app.dto._t_UpdateAppUserInputDTO)

        __repr__ = __str__

    _M_com.jimi.user.api.app.dto._t_UpdateAppUserInputDTO = IcePy.defineValue('::com::jimi::user::api::app::dto::UpdateAppUserInputDTO', UpdateAppUserInputDTO, -1, (), False, False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('nickName', (), IcePy._t_string, False, 0)
    ))
    UpdateAppUserInputDTO._ice_type = _M_com.jimi.user.api.app.dto._t_UpdateAppUserInputDTO

    _M_com.jimi.user.api.app.dto.UpdateAppUserInputDTO = UpdateAppUserInputDTO
    del UpdateAppUserInputDTO

if 'FindListInputDTO' not in _M_com.jimi.user.api.app.dto.__dict__:
    _M_com.jimi.user.api.app.dto.FindListInputDTO = Ice.createTempClass()
    class FindListInputDTO(Ice.Value):
        """
        查询用户数据输入参数
        @date 2019年8月23日 上午10:05:28
        @author wangke
        @version 1.0
        Members:
        id -- 用户ID
        phone -- 用户手机号
        """
        def __init__(self, id='', phone=''):
            self.id = id
            self.phone = phone

        def ice_id(self):
            return '::com::jimi::user::api::app::dto::FindListInputDTO'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::app::dto::FindListInputDTO'

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.user.api.app.dto._t_FindListInputDTO)

        __repr__ = __str__

    _M_com.jimi.user.api.app.dto._t_FindListInputDTO = IcePy.defineValue('::com::jimi::user::api::app::dto::FindListInputDTO', FindListInputDTO, -1, (), False, False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('phone', (), IcePy._t_string, False, 0)
    ))
    FindListInputDTO._ice_type = _M_com.jimi.user.api.app.dto._t_FindListInputDTO

    _M_com.jimi.user.api.app.dto.FindListInputDTO = FindListInputDTO
    del FindListInputDTO

# End of module com.jimi.user.api.app.dto

__name__ = 'com.jimi.user.api.app'

_M_com.jimi.user.api.app._t_AppUserService = IcePy.defineValue('::com::jimi::user::api::app::AppUserService', Ice.Value, -1, (), False, True, None, ())

if 'AppUserServicePrx' not in _M_com.jimi.user.api.app.__dict__:
    _M_com.jimi.user.api.app.AppUserServicePrx = Ice.createTempClass()
    class AppUserServicePrx(Ice.ObjectPrx):

        """
        添加APP用户信息
        Arguments:
        addAppUserInputDTO -- 用户数据输入参数
        context -- The request context for the invocation.
        Returns: 添加用户状态
        """
        def addAppUser(self, addAppUserInputDTO, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_addAppUser.invoke(self, ((addAppUserInputDTO, ), context))

        """
        添加APP用户信息
        Arguments:
        addAppUserInputDTO -- 用户数据输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addAppUserAsync(self, addAppUserInputDTO, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_addAppUser.invokeAsync(self, ((addAppUserInputDTO, ), context))

        """
        添加APP用户信息
        Arguments:
        addAppUserInputDTO -- 用户数据输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addAppUser(self, addAppUserInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_addAppUser.begin(self, ((addAppUserInputDTO, ), _response, _ex, _sent, context))

        """
        添加APP用户信息
        Arguments:
        addAppUserInputDTO -- 用户数据输入参数
        Returns: 添加用户状态
        """
        def end_addAppUser(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_addAppUser.end(self, _r)

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        context -- The request context for the invocation.
        Returns: 用户信息
        """
        def loginAuth(self, phone, password, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_loginAuth.invoke(self, ((phone, password), context))

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def loginAuthAsync(self, phone, password, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_loginAuth.invokeAsync(self, ((phone, password), context))

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_loginAuth(self, phone, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_loginAuth.begin(self, ((phone, password), _response, _ex, _sent, context))

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        Returns: 用户信息
        """
        def end_loginAuth(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_loginAuth.end(self, _r)

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 用户信息
        """
        def findById(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findById.invoke(self, ((id, ), context))

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByIdAsync(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findById.invokeAsync(self, ((id, ), context))

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        Returns: 用户信息
        """
        def end_findById(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_findById.end(self, _r)

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        context -- The request context for the invocation.
        Returns: 是否更新成功
        """
        def updatePassword(self, id, password, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_updatePassword.invoke(self, ((id, password), context))

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePasswordAsync(self, id, password, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_updatePassword.invokeAsync(self, ((id, password), context))

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePassword(self, id, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_updatePassword.begin(self, ((id, password), _response, _ex, _sent, context))

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        Returns: 是否更新成功
        """
        def end_updatePassword(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_updatePassword.end(self, _r)

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 是否更新成功
        """
        def resetPassword(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_resetPassword.invoke(self, ((id, ), context))

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def resetPasswordAsync(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_resetPassword.invokeAsync(self, ((id, ), context))

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_resetPassword(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_resetPassword.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        Returns: 是否更新成功
        """
        def end_resetPassword(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_resetPassword.end(self, _r)

        """
        启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 是否启用成功
        """
        def enableAppUser(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_enableAppUser.invoke(self, ((id, ), context))

        """
        启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def enableAppUserAsync(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_enableAppUser.invokeAsync(self, ((id, ), context))

        """
        启用用户
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_enableAppUser(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_enableAppUser.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        启用用户
        Arguments:
        id -- 用户ID
        Returns: 是否启用成功
        """
        def end_enableAppUser(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_enableAppUser.end(self, _r)

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 是否关闭启用成功
        """
        def disableAppUesr(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_disableAppUesr.invoke(self, ((id, ), context))

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disableAppUesrAsync(self, id, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_disableAppUesr.invokeAsync(self, ((id, ), context))

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disableAppUesr(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_disableAppUesr.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        Returns: 是否关闭启用成功
        """
        def end_disableAppUesr(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_disableAppUesr.end(self, _r)

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: 是否绑定成功
        """
        def bindOrg(self, id, orgId, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_bindOrg.invoke(self, ((id, orgId), context))

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def bindOrgAsync(self, id, orgId, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_bindOrg.invokeAsync(self, ((id, orgId), context))

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_bindOrg(self, id, orgId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_bindOrg.begin(self, ((id, orgId), _response, _ex, _sent, context))

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        Returns: 是否绑定成功
        """
        def end_bindOrg(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_bindOrg.end(self, _r)

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: 是否解绑成功
        """
        def unbindOrg(self, id, orgId, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_unbindOrg.invoke(self, ((id, orgId), context))

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def unbindOrgAsync(self, id, orgId, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_unbindOrg.invokeAsync(self, ((id, orgId), context))

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_unbindOrg(self, id, orgId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_unbindOrg.begin(self, ((id, orgId), _response, _ex, _sent, context))

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        Returns: 是否解绑成功
        """
        def end_unbindOrg(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_unbindOrg.end(self, _r)

        """
        更新用户信息
        Arguments:
        updateAppUserInputDTO -- 更新的用户数据
        context -- The request context for the invocation.
        Returns: 是否更新成功
        """
        def updateAppUser(self, updateAppUserInputDTO, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_updateAppUser.invoke(self, ((updateAppUserInputDTO, ), context))

        """
        更新用户信息
        Arguments:
        updateAppUserInputDTO -- 更新的用户数据
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateAppUserAsync(self, updateAppUserInputDTO, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_updateAppUser.invokeAsync(self, ((updateAppUserInputDTO, ), context))

        """
        更新用户信息
        Arguments:
        updateAppUserInputDTO -- 更新的用户数据
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateAppUser(self, updateAppUserInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_updateAppUser.begin(self, ((updateAppUserInputDTO, ), _response, _ex, _sent, context))

        """
        更新用户信息
        Arguments:
        updateAppUserInputDTO -- 更新的用户数据
        Returns: 是否更新成功
        """
        def end_updateAppUser(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_updateAppUser.end(self, _r)

        """
        获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        context -- The request context for the invocation.
        Returns: 用户数据列表
        """
        def findList(self, findListInputDTO, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findList.invoke(self, ((findListInputDTO, ), context))

        """
        获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findListAsync(self, findListInputDTO, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findList.invokeAsync(self, ((findListInputDTO, ), context))

        """
        获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findList(self, findListInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findList.begin(self, ((findListInputDTO, ), _response, _ex, _sent, context))

        """
        获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        Returns: 用户数据列表
        """
        def end_findList(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_findList.end(self, _r)

        """
        分页获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: 用户数据列表
        """
        def findPage(self, findListInputDTO, pageNum, pageSize, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findPage.invoke(self, ((findListInputDTO, pageNum, pageSize), context))

        """
        分页获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findPageAsync(self, findListInputDTO, pageNum, pageSize, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findPage.invokeAsync(self, ((findListInputDTO, pageNum, pageSize), context))

        """
        分页获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findPage(self, findListInputDTO, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.user.api.app.AppUserService._op_findPage.begin(self, ((findListInputDTO, pageNum, pageSize), _response, _ex, _sent, context))

        """
        分页获取用户列表
        Arguments:
        findListInputDTO -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        Returns: 用户数据列表
        """
        def end_findPage(self, _r):
            return _M_com.jimi.user.api.app.AppUserService._op_findPage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.user.api.app.AppUserServicePrx.ice_checkedCast(proxy, '::com::jimi::user::api::app::AppUserService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.user.api.app.AppUserServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::app::AppUserService'
    _M_com.jimi.user.api.app._t_AppUserServicePrx = IcePy.defineProxy('::com::jimi::user::api::app::AppUserService', AppUserServicePrx)

    _M_com.jimi.user.api.app.AppUserServicePrx = AppUserServicePrx
    del AppUserServicePrx

    _M_com.jimi.user.api.app.AppUserService = Ice.createTempClass()
    class AppUserService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::user::api::app::AppUserService')

        def ice_id(self, current=None):
            return '::com::jimi::user::api::app::AppUserService'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::user::api::app::AppUserService'

        def addAppUser(self, addAppUserInputDTO, current=None):
            """
            添加APP用户信息
            Arguments:
            addAppUserInputDTO -- 用户数据输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addAppUser' not implemented")

        def loginAuth(self, phone, password, current=None):
            """
            登录认证
            Arguments:
            phone -- 用户手机号
            password -- 用户密码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'loginAuth' not implemented")

        def findById(self, id, current=None):
            """
            通过用户ID查找用户信息
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findById' not implemented")

        def updatePassword(self, id, password, current=None):
            """
            更新用户密码
            Arguments:
            id -- 用户ID
            password -- 用户更新密码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePassword' not implemented")

        def resetPassword(self, id, current=None):
            """
            重置用户密码
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'resetPassword' not implemented")

        def enableAppUser(self, id, current=None):
            """
            启用用户
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'enableAppUser' not implemented")

        def disableAppUesr(self, id, current=None):
            """
            关闭启用用户
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disableAppUesr' not implemented")

        def bindOrg(self, id, orgId, current=None):
            """
            绑定用户到组织
            Arguments:
            id -- 用户ID
            orgId -- 组织ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'bindOrg' not implemented")

        def unbindOrg(self, id, orgId, current=None):
            """
            解绑组织用户
            Arguments:
            id -- 用户ID
            orgId -- 组织ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'unbindOrg' not implemented")

        def updateAppUser(self, updateAppUserInputDTO, current=None):
            """
            更新用户信息
            Arguments:
            updateAppUserInputDTO -- 更新的用户数据
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateAppUser' not implemented")

        def findList(self, findListInputDTO, current=None):
            """
            获取用户列表
            Arguments:
            findListInputDTO -- 查询用户数据
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findList' not implemented")

        def findPage(self, findListInputDTO, pageNum, pageSize, current=None):
            """
            分页获取用户列表
            Arguments:
            findListInputDTO -- 查询用户数据
            pageNum -- 页数
            pageSize -- 每页数据大小
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findPage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.user.api.app._t_AppUserServiceDisp)

        __repr__ = __str__

    _M_com.jimi.user.api.app._t_AppUserServiceDisp = IcePy.defineClass('::com::jimi::user::api::app::AppUserService', AppUserService, (), None, ())
    AppUserService._ice_type = _M_com.jimi.user.api.app._t_AppUserServiceDisp

    AppUserService._op_addAppUser = IcePy.Operation('addAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.user.api.app.dto._t_AddAppUserInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_loginAuth = IcePy.Operation('loginAuth', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_com.jimi.user.api.app.dto._t_AppUserOutputDTO, False, 0), ())
    AppUserService._op_findById = IcePy.Operation('findById', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.user.api.app.dto._t_AppUserOutputDTO, False, 0), ())
    AppUserService._op_updatePassword = IcePy.Operation('updatePassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_resetPassword = IcePy.Operation('resetPassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_enableAppUser = IcePy.Operation('enableAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_disableAppUesr = IcePy.Operation('disableAppUesr', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_bindOrg = IcePy.Operation('bindOrg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_unbindOrg = IcePy.Operation('unbindOrg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_updateAppUser = IcePy.Operation('updateAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.user.api.app.dto._t_UpdateAppUserInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    AppUserService._op_findList = IcePy.Operation('findList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_com.jimi.user.api.app.dto._t_FindListInputDTO, False, 0),), (), ((), _M_com.jimi.user.api.app.dto._t_AppUserListOutputDTO, False, 0), ())
    AppUserService._op_findPage = IcePy.Operation('findPage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_com.jimi.user.api.app.dto._t_FindListInputDTO, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.user.api.app.dto._t_AppUserListOutputDTO, False, 0), ())

    _M_com.jimi.user.api.app.AppUserService = AppUserService
    del AppUserService

# End of module com.jimi.user.api.app

__name__ = 'com.jimi.user.api'

# End of module com.jimi.user.api

__name__ = 'com.jimi.user'

# End of module com.jimi.user

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `appuser.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import appuser_dto_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')

# Included module com.jimi.api.user
_M_com.jimi.api.user = Ice.openModule('com.jimi.api.user')

# Included module com.jimi.api.user.app
_M_com.jimi.api.user.app = Ice.openModule('com.jimi.api.user.app')

# Included module com.jimi.api.user.app.dto
_M_com.jimi.api.user.app.dto = Ice.openModule('com.jimi.api.user.app.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.api
__name__ = 'com.jimi.api'

# Start of module com.jimi.api.user
__name__ = 'com.jimi.api.user'

# Start of module com.jimi.api.user.app
__name__ = 'com.jimi.api.user.app'

_M_com.jimi.api.user.app._t_AppUserApi = IcePy.defineValue('::com::jimi::api::user::app::AppUserApi', Ice.Value, -1, (), False, True, None, ())

if 'AppUserApiPrx' not in _M_com.jimi.api.user.app.__dict__:
    _M_com.jimi.api.user.app.AppUserApiPrx = Ice.createTempClass()
    class AppUserApiPrx(Ice.ObjectPrx):

        """
        添加APP用户信息
        Arguments:
        dto -- 用户数据输入参数
        context -- The request context for the invocation.
        Returns: 添加用户状态
        """
        def addAppUser(self, dto, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_addAppUser.invoke(self, ((dto, ), context))

        """
        添加APP用户信息
        Arguments:
        dto -- 用户数据输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addAppUserAsync(self, dto, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_addAppUser.invokeAsync(self, ((dto, ), context))

        """
        添加APP用户信息
        Arguments:
        dto -- 用户数据输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addAppUser(self, dto, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_addAppUser.begin(self, ((dto, ), _response, _ex, _sent, context))

        """
        添加APP用户信息
        Arguments:
        dto -- 用户数据输入参数
        Returns: 添加用户状态
        """
        def end_addAppUser(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_addAppUser.end(self, _r)

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        context -- The request context for the invocation.
        Returns: 用户信息
        """
        def loginAuth(self, phone, password, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_loginAuth.invoke(self, ((phone, password), context))

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def loginAuthAsync(self, phone, password, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_loginAuth.invokeAsync(self, ((phone, password), context))

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_loginAuth(self, phone, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_loginAuth.begin(self, ((phone, password), _response, _ex, _sent, context))

        """
        登录认证
        Arguments:
        phone -- 用户手机号
        password -- 用户密码
        Returns: 用户信息
        """
        def end_loginAuth(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_loginAuth.end(self, _r)

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 用户信息
        """
        def findById(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findById.invoke(self, ((id, ), context))

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByIdAsync(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findById.invokeAsync(self, ((id, ), context))

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        通过用户ID查找用户信息
        Arguments:
        id -- 用户ID
        Returns: 用户信息
        """
        def end_findById(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_findById.end(self, _r)

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        context -- The request context for the invocation.
        Returns: 是否更新成功
        """
        def updatePassword(self, id, password, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_updatePassword.invoke(self, ((id, password), context))

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updatePasswordAsync(self, id, password, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_updatePassword.invokeAsync(self, ((id, password), context))

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updatePassword(self, id, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_updatePassword.begin(self, ((id, password), _response, _ex, _sent, context))

        """
        更新用户密码
        Arguments:
        id -- 用户ID
        password -- 用户更新密码
        Returns: 是否更新成功
        """
        def end_updatePassword(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_updatePassword.end(self, _r)

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 是否更新成功
        """
        def resetPassword(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_resetPassword.invoke(self, ((id, ), context))

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def resetPasswordAsync(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_resetPassword.invokeAsync(self, ((id, ), context))

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_resetPassword(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_resetPassword.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        重置用户密码
        Arguments:
        id -- 用户ID
        Returns: 是否更新成功
        """
        def end_resetPassword(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_resetPassword.end(self, _r)

        """
        启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 是否启用成功
        """
        def enableAppUser(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_enableAppUser.invoke(self, ((id, ), context))

        """
        启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def enableAppUserAsync(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_enableAppUser.invokeAsync(self, ((id, ), context))

        """
        启用用户
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_enableAppUser(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_enableAppUser.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        启用用户
        Arguments:
        id -- 用户ID
        Returns: 是否启用成功
        """
        def end_enableAppUser(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_enableAppUser.end(self, _r)

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: 是否关闭启用成功
        """
        def disableAppUser(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_disableAppUser.invoke(self, ((id, ), context))

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disableAppUserAsync(self, id, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_disableAppUser.invokeAsync(self, ((id, ), context))

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disableAppUser(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_disableAppUser.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        关闭启用用户
        Arguments:
        id -- 用户ID
        Returns: 是否关闭启用成功
        """
        def end_disableAppUser(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_disableAppUser.end(self, _r)

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: 是否绑定成功
        """
        def bindOrg(self, id, orgId, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_bindOrg.invoke(self, ((id, orgId), context))

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def bindOrgAsync(self, id, orgId, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_bindOrg.invokeAsync(self, ((id, orgId), context))

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_bindOrg(self, id, orgId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_bindOrg.begin(self, ((id, orgId), _response, _ex, _sent, context))

        """
        绑定用户到组织
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        Returns: 是否绑定成功
        """
        def end_bindOrg(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_bindOrg.end(self, _r)

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: 是否解绑成功
        """
        def unbindOrg(self, id, orgId, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_unbindOrg.invoke(self, ((id, orgId), context))

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def unbindOrgAsync(self, id, orgId, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_unbindOrg.invokeAsync(self, ((id, orgId), context))

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_unbindOrg(self, id, orgId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_unbindOrg.begin(self, ((id, orgId), _response, _ex, _sent, context))

        """
        解绑组织用户
        Arguments:
        id -- 用户ID
        orgId -- 组织ID
        Returns: 是否解绑成功
        """
        def end_unbindOrg(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_unbindOrg.end(self, _r)

        """
        更新用户信息
        Arguments:
        dto -- 更新的用户数据
        context -- The request context for the invocation.
        Returns: 是否更新成功
        """
        def updateAppUser(self, dto, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_updateAppUser.invoke(self, ((dto, ), context))

        """
        更新用户信息
        Arguments:
        dto -- 更新的用户数据
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateAppUserAsync(self, dto, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_updateAppUser.invokeAsync(self, ((dto, ), context))

        """
        更新用户信息
        Arguments:
        dto -- 更新的用户数据
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateAppUser(self, dto, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_updateAppUser.begin(self, ((dto, ), _response, _ex, _sent, context))

        """
        更新用户信息
        Arguments:
        dto -- 更新的用户数据
        Returns: 是否更新成功
        """
        def end_updateAppUser(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_updateAppUser.end(self, _r)

        """
        获取用户列表
        Arguments:
        dto -- 查询用户数据
        context -- The request context for the invocation.
        Returns: 用户数据列表
        """
        def findList(self, dto, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findList.invoke(self, ((dto, ), context))

        """
        获取用户列表
        Arguments:
        dto -- 查询用户数据
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findListAsync(self, dto, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findList.invokeAsync(self, ((dto, ), context))

        """
        获取用户列表
        Arguments:
        dto -- 查询用户数据
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findList(self, dto, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findList.begin(self, ((dto, ), _response, _ex, _sent, context))

        """
        获取用户列表
        Arguments:
        dto -- 查询用户数据
        Returns: 用户数据列表
        """
        def end_findList(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_findList.end(self, _r)

        """
        分页获取用户列表
        Arguments:
        dto -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: 用户数据列表
        """
        def findPage(self, dto, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findPage.invoke(self, ((dto, pageNum, pageSize), context))

        """
        分页获取用户列表
        Arguments:
        dto -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findPageAsync(self, dto, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findPage.invokeAsync(self, ((dto, pageNum, pageSize), context))

        """
        分页获取用户列表
        Arguments:
        dto -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findPage(self, dto, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApi._op_findPage.begin(self, ((dto, pageNum, pageSize), _response, _ex, _sent, context))

        """
        分页获取用户列表
        Arguments:
        dto -- 查询用户数据
        pageNum -- 页数
        pageSize -- 每页数据大小
        Returns: 用户数据列表
        """
        def end_findPage(self, _r):
            return _M_com.jimi.api.user.app.AppUserApi._op_findPage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.app.AppUserApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::app::AppUserApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.app.AppUserApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::app::AppUserApi'
    _M_com.jimi.api.user.app._t_AppUserApiPrx = IcePy.defineProxy('::com::jimi::api::user::app::AppUserApi', AppUserApiPrx)

    _M_com.jimi.api.user.app.AppUserApiPrx = AppUserApiPrx
    del AppUserApiPrx

    _M_com.jimi.api.user.app.AppUserApi = Ice.createTempClass()
    class AppUserApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::app::AppUserApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::app::AppUserApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::app::AppUserApi'

        def addAppUser(self, dto, current=None):
            """
            添加APP用户信息
            Arguments:
            dto -- 用户数据输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addAppUser' not implemented")

        def loginAuth(self, phone, password, current=None):
            """
            登录认证
            Arguments:
            phone -- 用户手机号
            password -- 用户密码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'loginAuth' not implemented")

        def findById(self, id, current=None):
            """
            通过用户ID查找用户信息
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findById' not implemented")

        def updatePassword(self, id, password, current=None):
            """
            更新用户密码
            Arguments:
            id -- 用户ID
            password -- 用户更新密码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updatePassword' not implemented")

        def resetPassword(self, id, current=None):
            """
            重置用户密码
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'resetPassword' not implemented")

        def enableAppUser(self, id, current=None):
            """
            启用用户
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'enableAppUser' not implemented")

        def disableAppUser(self, id, current=None):
            """
            关闭启用用户
            Arguments:
            id -- 用户ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disableAppUser' not implemented")

        def bindOrg(self, id, orgId, current=None):
            """
            绑定用户到组织
            Arguments:
            id -- 用户ID
            orgId -- 组织ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'bindOrg' not implemented")

        def unbindOrg(self, id, orgId, current=None):
            """
            解绑组织用户
            Arguments:
            id -- 用户ID
            orgId -- 组织ID
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'unbindOrg' not implemented")

        def updateAppUser(self, dto, current=None):
            """
            更新用户信息
            Arguments:
            dto -- 更新的用户数据
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateAppUser' not implemented")

        def findList(self, dto, current=None):
            """
            获取用户列表
            Arguments:
            dto -- 查询用户数据
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findList' not implemented")

        def findPage(self, dto, pageNum, pageSize, current=None):
            """
            分页获取用户列表
            Arguments:
            dto -- 查询用户数据
            pageNum -- 页数
            pageSize -- 每页数据大小
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findPage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.app._t_AppUserApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.app._t_AppUserApiDisp = IcePy.defineClass('::com::jimi::api::user::app::AppUserApi', AppUserApi, (), None, ())
    AppUserApi._ice_type = _M_com.jimi.api.user.app._t_AppUserApiDisp

    AppUserApi._op_addAppUser = IcePy.Operation('addAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.app.dto._t_AddAppUserInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_loginAuth = IcePy.Operation('loginAuth', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_com.jimi.api.user.app.dto._t_AppUserOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_findById = IcePy.Operation('findById', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.app.dto._t_AppUserOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_updatePassword = IcePy.Operation('updatePassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_resetPassword = IcePy.Operation('resetPassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_enableAppUser = IcePy.Operation('enableAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_disableAppUser = IcePy.Operation('disableAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_bindOrg = IcePy.Operation('bindOrg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_unbindOrg = IcePy.Operation('unbindOrg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_updateAppUser = IcePy.Operation('updateAppUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.app.dto._t_UpdateAppUserInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_findList = IcePy.Operation('findList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_com.jimi.api.user.app.dto._t_FindListInputDTO, False, 0),), (), ((), _M_com.jimi.api.user.app.dto._t_AppUserListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    AppUserApi._op_findPage = IcePy.Operation('findPage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_com.jimi.api.user.app.dto._t_FindListInputDTO, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.api.user.app.dto._t_AppUserListOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.app.AppUserApi = AppUserApi
    del AppUserApi

# End of module com.jimi.api.user.app

__name__ = 'com.jimi.api.user'

# End of module com.jimi.api.user

__name__ = 'com.jimi.api'

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `organization_type.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import organization_type_dto_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.api
_M_com.jimi.api = Ice.openModule('com.jimi.api')

# Included module com.jimi.api.user
_M_com.jimi.api.user = Ice.openModule('com.jimi.api.user')

# Included module com.jimi.api.user.organization
_M_com.jimi.api.user.organization = Ice.openModule('com.jimi.api.user.organization')

# Included module com.jimi.api.user.organization.dto
_M_com.jimi.api.user.organization.dto = Ice.openModule('com.jimi.api.user.organization.dto')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.api
__name__ = 'com.jimi.api'

# Start of module com.jimi.api.user
__name__ = 'com.jimi.api.user'

# Start of module com.jimi.api.user.organization
__name__ = 'com.jimi.api.user.organization'

if '_t_OrganizationTypeList' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization._t_OrganizationTypeList = IcePy.defineSequence('::com::jimi::api::user::organization::OrganizationTypeList', (), _M_com.jimi.api.user.organization.dto._t_OrganizationTypeOutputDTO)

_M_com.jimi.api.user.organization._t_OrganizationTypeApi = IcePy.defineValue('::com::jimi::api::user::organization::OrganizationTypeApi', Ice.Value, -1, (), False, True, None, ())

if 'OrganizationTypeApiPrx' not in _M_com.jimi.api.user.organization.__dict__:
    _M_com.jimi.api.user.organization.OrganizationTypeApiPrx = Ice.createTempClass()
    class OrganizationTypeApiPrx(Ice.ObjectPrx):

        """
        检查机构类型code是否存在
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        code -- 
        context -- The request context for the invocation.
        Returns: long
        """
        def existsByCode(self, code, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_existsByCode.invoke(self, ((code, ), context))

        """
        检查机构类型code是否存在
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        code -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def existsByCodeAsync(self, code, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_existsByCode.invokeAsync(self, ((code, ), context))

        """
        检查机构类型code是否存在
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        code -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_existsByCode(self, code, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_existsByCode.begin(self, ((code, ), _response, _ex, _sent, context))

        """
        检查机构类型code是否存在
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        code -- 
        Returns: long
        """
        def end_existsByCode(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_existsByCode.end(self, _r)

        """
        添加机构类型
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        organizationTypeInputDTO -- 机构类型输入参数
        context -- The request context for the invocation.
        Returns: organizationTypeInputDTO 机构类型信息
        """
        def addOrganizationType(self, organizationTypeInputDTO, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_addOrganizationType.invoke(self, ((organizationTypeInputDTO, ), context))

        """
        添加机构类型
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        organizationTypeInputDTO -- 机构类型输入参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addOrganizationTypeAsync(self, organizationTypeInputDTO, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_addOrganizationType.invokeAsync(self, ((organizationTypeInputDTO, ), context))

        """
        添加机构类型
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        organizationTypeInputDTO -- 机构类型输入参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addOrganizationType(self, organizationTypeInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_addOrganizationType.begin(self, ((organizationTypeInputDTO, ), _response, _ex, _sent, context))

        """
        添加机构类型
        @date 2019-08-22 15:56
        @author zhangduanfeng
        @since 1.0.0
        Arguments:
        organizationTypeInputDTO -- 机构类型输入参数
        Returns: organizationTypeInputDTO 机构类型信息
        """
        def end_addOrganizationType(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_addOrganizationType.end(self, _r)

        """
        更新机构类型信息
        Arguments:
        organizationTypeInputDTO -- 
        context -- The request context for the invocation.
        Returns: 更新后机构类型信息
        """
        def updateOrganizationType(self, organizationTypeInputDTO, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_updateOrganizationType.invoke(self, ((organizationTypeInputDTO, ), context))

        """
        更新机构类型信息
        Arguments:
        organizationTypeInputDTO -- 
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def updateOrganizationTypeAsync(self, organizationTypeInputDTO, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_updateOrganizationType.invokeAsync(self, ((organizationTypeInputDTO, ), context))

        """
        更新机构类型信息
        Arguments:
        organizationTypeInputDTO -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_updateOrganizationType(self, organizationTypeInputDTO, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_updateOrganizationType.begin(self, ((organizationTypeInputDTO, ), _response, _ex, _sent, context))

        """
        更新机构类型信息
        Arguments:
        organizationTypeInputDTO -- 
        Returns: 更新后机构类型信息
        """
        def end_updateOrganizationType(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_updateOrganizationType.end(self, _r)

        """
        获取所有机构类型列表
        Arguments:
        platform -- 平台  传null 获取所有列表
        pageNum -- 页码
        pageSize -- 页数
        context -- The request context for the invocation.
        Returns: 机构类型列表
        """
        def findOrganizationTypeByPlatform(self, platform, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByPlatform.invoke(self, ((platform, pageNum, pageSize), context))

        """
        获取所有机构类型列表
        Arguments:
        platform -- 平台  传null 获取所有列表
        pageNum -- 页码
        pageSize -- 页数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findOrganizationTypeByPlatformAsync(self, platform, pageNum, pageSize, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByPlatform.invokeAsync(self, ((platform, pageNum, pageSize), context))

        """
        获取所有机构类型列表
        Arguments:
        platform -- 平台  传null 获取所有列表
        pageNum -- 页码
        pageSize -- 页数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findOrganizationTypeByPlatform(self, platform, pageNum, pageSize, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByPlatform.begin(self, ((platform, pageNum, pageSize), _response, _ex, _sent, context))

        """
        获取所有机构类型列表
        Arguments:
        platform -- 平台  传null 获取所有列表
        pageNum -- 页码
        pageSize -- 页数
        Returns: 机构类型列表
        """
        def end_findOrganizationTypeByPlatform(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByPlatform.end(self, _r)

        """
        根据机构类型编码查看机构类型信息
        Arguments:
        organizationTypeCode -- 机构类型编码
        context -- The request context for the invocation.
        Returns: 机构类型信息
        """
        def findOrganizationTypeByCode(self, organizationTypeCode, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByCode.invoke(self, ((organizationTypeCode, ), context))

        """
        根据机构类型编码查看机构类型信息
        Arguments:
        organizationTypeCode -- 机构类型编码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findOrganizationTypeByCodeAsync(self, organizationTypeCode, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByCode.invokeAsync(self, ((organizationTypeCode, ), context))

        """
        根据机构类型编码查看机构类型信息
        Arguments:
        organizationTypeCode -- 机构类型编码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findOrganizationTypeByCode(self, organizationTypeCode, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByCode.begin(self, ((organizationTypeCode, ), _response, _ex, _sent, context))

        """
        根据机构类型编码查看机构类型信息
        Arguments:
        organizationTypeCode -- 机构类型编码
        Returns: 机构类型信息
        """
        def end_findOrganizationTypeByCode(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_findOrganizationTypeByCode.end(self, _r)

        """
        删除机构类型
        Arguments:
        account -- 操作人
        organizationTypeCode -- 机构类型编码
        context -- The request context for the invocation.
        """
        def deleteOrganizationTypeBy(self, account, organizationTypeCode, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_deleteOrganizationTypeBy.invoke(self, ((account, organizationTypeCode), context))

        """
        删除机构类型
        Arguments:
        account -- 操作人
        organizationTypeCode -- 机构类型编码
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteOrganizationTypeByAsync(self, account, organizationTypeCode, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_deleteOrganizationTypeBy.invokeAsync(self, ((account, organizationTypeCode), context))

        """
        删除机构类型
        Arguments:
        account -- 操作人
        organizationTypeCode -- 机构类型编码
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteOrganizationTypeBy(self, account, organizationTypeCode, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_deleteOrganizationTypeBy.begin(self, ((account, organizationTypeCode), _response, _ex, _sent, context))

        """
        删除机构类型
        Arguments:
        account -- 操作人
        organizationTypeCode -- 机构类型编码
        """
        def end_deleteOrganizationTypeBy(self, _r):
            return _M_com.jimi.api.user.organization.OrganizationTypeApi._op_deleteOrganizationTypeBy.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApiPrx.ice_checkedCast(proxy, '::com::jimi::api::user::organization::OrganizationTypeApi', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.api.user.organization.OrganizationTypeApiPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationTypeApi'
    _M_com.jimi.api.user.organization._t_OrganizationTypeApiPrx = IcePy.defineProxy('::com::jimi::api::user::organization::OrganizationTypeApi', OrganizationTypeApiPrx)

    _M_com.jimi.api.user.organization.OrganizationTypeApiPrx = OrganizationTypeApiPrx
    del OrganizationTypeApiPrx

    _M_com.jimi.api.user.organization.OrganizationTypeApi = Ice.createTempClass()
    class OrganizationTypeApi(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::api::user::organization::OrganizationTypeApi')

        def ice_id(self, current=None):
            return '::com::jimi::api::user::organization::OrganizationTypeApi'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::api::user::organization::OrganizationTypeApi'

        def existsByCode(self, code, current=None):
            """
            检查机构类型code是否存在
            @date 2019-08-22 15:56
            @author zhangduanfeng
            @since 1.0.0
            Arguments:
            code -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'existsByCode' not implemented")

        def addOrganizationType(self, organizationTypeInputDTO, current=None):
            """
            添加机构类型
            @date 2019-08-22 15:56
            @author zhangduanfeng
            @since 1.0.0
            Arguments:
            organizationTypeInputDTO -- 机构类型输入参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addOrganizationType' not implemented")

        def updateOrganizationType(self, organizationTypeInputDTO, current=None):
            """
            更新机构类型信息
            Arguments:
            organizationTypeInputDTO -- 
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'updateOrganizationType' not implemented")

        def findOrganizationTypeByPlatform(self, platform, pageNum, pageSize, current=None):
            """
            获取所有机构类型列表
            Arguments:
            platform -- 平台  传null 获取所有列表
            pageNum -- 页码
            pageSize -- 页数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findOrganizationTypeByPlatform' not implemented")

        def findOrganizationTypeByCode(self, organizationTypeCode, current=None):
            """
            根据机构类型编码查看机构类型信息
            Arguments:
            organizationTypeCode -- 机构类型编码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findOrganizationTypeByCode' not implemented")

        def deleteOrganizationTypeBy(self, account, organizationTypeCode, current=None):
            """
            删除机构类型
            Arguments:
            account -- 操作人
            organizationTypeCode -- 机构类型编码
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteOrganizationTypeBy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.api.user.organization._t_OrganizationTypeApiDisp)

        __repr__ = __str__

    _M_com.jimi.api.user.organization._t_OrganizationTypeApiDisp = IcePy.defineClass('::com::jimi::api::user::organization::OrganizationTypeApi', OrganizationTypeApi, (), None, ())
    OrganizationTypeApi._ice_type = _M_com.jimi.api.user.organization._t_OrganizationTypeApiDisp

    OrganizationTypeApi._op_existsByCode = IcePy.Operation('existsByCode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationTypeApi._op_addOrganizationType = IcePy.Operation('addOrganizationType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.organization.dto._t_OrganizationTypeInputDTO, False, 0),), (), ((), _M_com.jimi.api.user.organization.dto._t_OrganizationTypeOutputDTO, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationTypeApi._op_updateOrganizationType = IcePy.Operation('updateOrganizationType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api.user.organization.dto._t_OrganizationTypeInputDTO, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_com.jimi.api._t_ApiException,))
    OrganizationTypeApi._op_findOrganizationTypeByPlatform = IcePy.Operation('findOrganizationTypeByPlatform', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_com.jimi.api.user.organization._t_OrganizationTypeList, False, 0), ())
    OrganizationTypeApi._op_findOrganizationTypeByCode = IcePy.Operation('findOrganizationTypeByCode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_com.jimi.api.user.organization.dto._t_OrganizationTypeOutputDTO, False, 0), ())
    OrganizationTypeApi._op_deleteOrganizationTypeBy = IcePy.Operation('deleteOrganizationTypeBy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.api._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_com.jimi.api._t_ApiException,))

    _M_com.jimi.api.user.organization.OrganizationTypeApi = OrganizationTypeApi
    del OrganizationTypeApi

# End of module com.jimi.api.user.organization

__name__ = 'com.jimi.api.user'

# End of module com.jimi.api.user

__name__ = 'com.jimi.api'

# End of module com.jimi.api

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com

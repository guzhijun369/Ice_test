# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `organiz.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from model import organiz_common_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.jimi
_M_com.jimi = Ice.openModule('com.jimi')

# Included module com.jimi.platform
_M_com.jimi.platform = Ice.openModule('com.jimi.platform')

# Included module com.jimi.platform.user
_M_com.jimi.platform.user = Ice.openModule('com.jimi.platform.user')

# Included module com.jimi.platform.user.generated
_M_com.jimi.platform.user.generated = Ice.openModule('com.jimi.platform.user.generated')

# Start of module com
__name__ = 'com'

# Start of module com.jimi
__name__ = 'com.jimi'

# Start of module com.jimi.platform
__name__ = 'com.jimi.platform'

# Start of module com.jimi.platform.user
__name__ = 'com.jimi.platform.user'

# Start of module com.jimi.platform.user.generated
__name__ = 'com.jimi.platform.user.generated'

if '_t_Args0' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated._t_Args0 = IcePy.defineSequence('::com::jimi::platform::user::generated::Args0', (), _M_com.jimi.platform.user.generated._t_OrganizationTypeOutput)

if '_t_Args1' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated._t_Args1 = IcePy.defineSequence('::com::jimi::platform::user::generated::Args1', (), _M_com.jimi.platform.user.generated._t_AccountOutput)

_M_com.jimi.platform.user.generated._t_AccountManager = IcePy.defineValue('::com::jimi::platform::user::generated::AccountManager', Ice.Value, -1, (), False, True, None, ())

if 'AccountManagerPrx' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated.AccountManagerPrx = Ice.createTempClass()
    class AccountManagerPrx(Ice.ObjectPrx):

        """
        获取机构类型列表(该接口用于添加机构客户界面)
        @author yaojianping
        @date 2019年8月21日 下午2:03:24
        Arguments:
        accout -- 当前会话操作人
        platform -- 平台标识
        context -- The request context for the invocation.
        Returns: 返回对应平台机构类型列表
        """
        def getOrganizationType(self, accout, platform, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_getOrganizationType.invoke(self, ((accout, platform), context))

        """
        获取机构类型列表(该接口用于添加机构客户界面)
        @author yaojianping
        @date 2019年8月21日 下午2:03:24
        Arguments:
        accout -- 当前会话操作人
        platform -- 平台标识
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def getOrganizationTypeAsync(self, accout, platform, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_getOrganizationType.invokeAsync(self, ((accout, platform), context))

        """
        获取机构类型列表(该接口用于添加机构客户界面)
        @author yaojianping
        @date 2019年8月21日 下午2:03:24
        Arguments:
        accout -- 当前会话操作人
        platform -- 平台标识
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_getOrganizationType(self, accout, platform, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_getOrganizationType.begin(self, ((accout, platform), _response, _ex, _sent, context))

        """
        获取机构类型列表(该接口用于添加机构客户界面)
        @author yaojianping
        @date 2019年8月21日 下午2:03:24
        Arguments:
        accout -- 当前会话操作人
        platform -- 平台标识
        Returns: 返回对应平台机构类型列表
        """
        def end_getOrganizationType(self, _r):
            return _M_com.jimi.platform.user.generated.AccountManager._op_getOrganizationType.end(self, _r)

        """
        删除账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:03
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def deleteAccount(self, accout, uid, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_deleteAccount.invoke(self, ((accout, uid), context))

        """
        删除账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:03
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteAccountAsync(self, accout, uid, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_deleteAccount.invokeAsync(self, ((accout, uid), context))

        """
        删除账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:03
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteAccount(self, accout, uid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_deleteAccount.begin(self, ((accout, uid), _response, _ex, _sent, context))

        """
        删除账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:03
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        Returns: true-成功，false-失败
        """
        def end_deleteAccount(self, _r):
            return _M_com.jimi.platform.user.generated.AccountManager._op_deleteAccount.end(self, _r)

        """
        添加账号
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        accout -- 当前会话操作人
        input -- 账号参数输入
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def addAccount(self, accout, input, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_addAccount.invoke(self, ((accout, input), context))

        """
        添加账号
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        accout -- 当前会话操作人
        input -- 账号参数输入
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addAccountAsync(self, accout, input, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_addAccount.invokeAsync(self, ((accout, input), context))

        """
        添加账号
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        accout -- 当前会话操作人
        input -- 账号参数输入
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addAccount(self, accout, input, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_addAccount.begin(self, ((accout, input), _response, _ex, _sent, context))

        """
        添加账号
        @author yaojianping
        @date 2019年8月21日 下午2:55:02
        Arguments:
        accout -- 当前会话操作人
        input -- 账号参数输入
        Returns: true-成功，false-失败
        """
        def end_addAccount(self, _r):
            return _M_com.jimi.platform.user.generated.AccountManager._op_addAccount.end(self, _r)

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        isDisabled -- true-禁用，false-启用
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def disabledAccount(self, accout, uid, isDisabled, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_disabledAccount.invoke(self, ((accout, uid, isDisabled), context))

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        isDisabled -- true-禁用，false-启用
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disabledAccountAsync(self, accout, uid, isDisabled, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_disabledAccount.invokeAsync(self, ((accout, uid, isDisabled), context))

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        isDisabled -- true-禁用，false-启用
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disabledAccount(self, accout, uid, isDisabled, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_disabledAccount.begin(self, ((accout, uid, isDisabled), _response, _ex, _sent, context))

        """
        禁用/启用账号
        @author yaojianping
        @date 2019年8月21日 下午2:56:09
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        isDisabled -- true-禁用，false-启用
        Returns: true-成功，false-失败
        """
        def end_disabledAccount(self, _r):
            return _M_com.jimi.platform.user.generated.AccountManager._op_disabledAccount.end(self, _r)

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        context -- The request context for the invocation.
        Returns: 返回随机新密码
        """
        def resetPassword(self, accout, uid, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_resetPassword.invoke(self, ((accout, uid), context))

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def resetPasswordAsync(self, accout, uid, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_resetPassword.invokeAsync(self, ((accout, uid), context))

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_resetPassword(self, accout, uid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_resetPassword.begin(self, ((accout, uid), _response, _ex, _sent, context))

        """
        重置密码
        @author yaojianping
        @date 2019年8月21日 下午2:57:02
        Arguments:
        accout -- 当前会话操作人
        uid -- 账号id
        Returns: 返回随机新密码
        """
        def end_resetPassword(self, _r):
            return _M_com.jimi.platform.user.generated.AccountManager._op_resetPassword.end(self, _r)

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 账号列表
        """
        def findByOid(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_findByOid.invoke(self, ((accout, oid), context))

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByOidAsync(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_findByOid.invokeAsync(self, ((accout, oid), context))

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findByOid(self, accout, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManager._op_findByOid.begin(self, ((accout, oid), _response, _ex, _sent, context))

        """
        查询账号信息
        @author yaojianping
        @date 2019年8月21日 下午2:57:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        Returns: 账号列表
        """
        def end_findByOid(self, _r):
            return _M_com.jimi.platform.user.generated.AccountManager._op_findByOid.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.platform.user.generated.AccountManagerPrx.ice_checkedCast(proxy, '::com::jimi::platform::user::generated::AccountManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.platform.user.generated.AccountManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::platform::user::generated::AccountManager'
    _M_com.jimi.platform.user.generated._t_AccountManagerPrx = IcePy.defineProxy('::com::jimi::platform::user::generated::AccountManager', AccountManagerPrx)

    _M_com.jimi.platform.user.generated.AccountManagerPrx = AccountManagerPrx
    del AccountManagerPrx

    _M_com.jimi.platform.user.generated.AccountManager = Ice.createTempClass()
    class AccountManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::platform::user::generated::AccountManager')

        def ice_id(self, current=None):
            return '::com::jimi::platform::user::generated::AccountManager'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::platform::user::generated::AccountManager'

        def getOrganizationType(self, accout, platform, current=None):
            """
            获取机构类型列表(该接口用于添加机构客户界面)
            @author yaojianping
            @date 2019年8月21日 下午2:03:24
            Arguments:
            accout -- 当前会话操作人
            platform -- 平台标识
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'getOrganizationType' not implemented")

        def deleteAccount(self, accout, uid, current=None):
            """
            删除账号
            @author yaojianping
            @date 2019年8月21日 下午2:56:03
            Arguments:
            accout -- 当前会话操作人
            uid -- 账号id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteAccount' not implemented")

        def addAccount(self, accout, input, current=None):
            """
            添加账号
            @author yaojianping
            @date 2019年8月21日 下午2:55:02
            Arguments:
            accout -- 当前会话操作人
            input -- 账号参数输入
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addAccount' not implemented")

        def disabledAccount(self, accout, uid, isDisabled, current=None):
            """
            禁用/启用账号
            @author yaojianping
            @date 2019年8月21日 下午2:56:09
            Arguments:
            accout -- 当前会话操作人
            uid -- 账号id
            isDisabled -- true-禁用，false-启用
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disabledAccount' not implemented")

        def resetPassword(self, accout, uid, current=None):
            """
            重置密码
            @author yaojianping
            @date 2019年8月21日 下午2:57:02
            Arguments:
            accout -- 当前会话操作人
            uid -- 账号id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'resetPassword' not implemented")

        def findByOid(self, accout, oid, current=None):
            """
            查询账号信息
            @author yaojianping
            @date 2019年8月21日 下午2:57:33
            Arguments:
            accout -- 当前会话操作人
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findByOid' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.platform.user.generated._t_AccountManagerDisp)

        __repr__ = __str__

    _M_com.jimi.platform.user.generated._t_AccountManagerDisp = IcePy.defineClass('::com::jimi::platform::user::generated::AccountManager', AccountManager, (), None, ())
    AccountManager._ice_type = _M_com.jimi.platform.user.generated._t_AccountManagerDisp

    AccountManager._op_getOrganizationType = IcePy.Operation('getOrganizationType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_com.jimi.platform.user.generated._t_Args0, False, 0), ())
    AccountManager._op_deleteAccount = IcePy.Operation('deleteAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AccountManager._op_addAccount = IcePy.Operation('addAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), _M_com.jimi.platform.user.generated._t_AddAccountInput, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AccountManager._op_disabledAccount = IcePy.Operation('disabledAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AccountManager._op_resetPassword = IcePy.Operation('resetPassword', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AccountManager._op_findByOid = IcePy.Operation('findByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_com.jimi.platform.user.generated._t_Args1, False, 0), ())

    _M_com.jimi.platform.user.generated.AccountManager = AccountManager
    del AccountManager

if '_t_Args2' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated._t_Args2 = IcePy.defineSequence('::com::jimi::platform::user::generated::Args2', (), _M_com.jimi.platform.user.generated._t_OrganizationOutput)

_M_com.jimi.platform.user.generated._t_OrganizationManager = IcePy.defineValue('::com::jimi::platform::user::generated::OrganizationManager', Ice.Value, -1, (), False, True, None, ())

if 'OrganizationManagerPrx' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated.OrganizationManagerPrx = Ice.createTempClass()
    class OrganizationManagerPrx(Ice.ObjectPrx):

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def deleteOrganization(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_deleteOrganization.invoke(self, ((accout, oid), context))

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteOrganizationAsync(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_deleteOrganization.invokeAsync(self, ((accout, oid), context))

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteOrganization(self, accout, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_deleteOrganization.begin(self, ((accout, oid), _response, _ex, _sent, context))

        """
        删除机构
        @author yaojianping
        @date 2019年8月21日 下午2:06:26
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        Returns: true-成功，false-失败
        """
        def end_deleteOrganization(self, _r):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_deleteOrganization.end(self, _r)

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        isDisabled -- true-禁用，false-启用
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def disabledOrganization(self, accout, oid, isDisabled, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_disabledOrganization.invoke(self, ((accout, oid, isDisabled), context))

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        isDisabled -- true-禁用，false-启用
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def disabledOrganizationAsync(self, accout, oid, isDisabled, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_disabledOrganization.invokeAsync(self, ((accout, oid, isDisabled), context))

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        isDisabled -- true-禁用，false-启用
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_disabledOrganization(self, accout, oid, isDisabled, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_disabledOrganization.begin(self, ((accout, oid, isDisabled), _response, _ex, _sent, context))

        """
        禁用/启用机构
        @author yaojianping
        @date 2019年8月21日 下午2:02:33
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        isDisabled -- true-禁用，false-启用
        Returns: true-成功，false-失败
        """
        def end_disabledOrganization(self, _r):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_disabledOrganization.end(self, _r)

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 下级机构基本信息
        """
        def findAllChildByOid(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findAllChildByOid.invoke(self, ((accout, oid), context))

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findAllChildByOidAsync(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findAllChildByOid.invokeAsync(self, ((accout, oid), context))

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findAllChildByOid(self, accout, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findAllChildByOid.begin(self, ((accout, oid), _response, _ex, _sent, context))

        """
        查询下级机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午2:01:28
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        Returns: 下级机构基本信息
        """
        def end_findAllChildByOid(self, _r):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findAllChildByOid.end(self, _r)

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 机构基本信息
        """
        def findByOid(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findByOid.invoke(self, ((accout, oid), context))

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByOidAsync(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findByOid.invokeAsync(self, ((accout, oid), context))

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findByOid(self, accout, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findByOid.begin(self, ((accout, oid), _response, _ex, _sent, context))

        """
        查询机构基本信息(该方法用于树形加载时)
        @author yaojianping
        @date 2019年8月21日 下午1:59:48
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        Returns: 机构基本信息
        """
        def end_findByOid(self, _r):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_findByOid.end(self, _r)

        """
        添加机构
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        accout -- 当前会话操作人
        input -- 机构参数输入
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def addOrganization(self, accout, input, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_addOrganization.invoke(self, ((accout, input), context))

        """
        添加机构
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        accout -- 当前会话操作人
        input -- 机构参数输入
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addOrganizationAsync(self, accout, input, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_addOrganization.invokeAsync(self, ((accout, input), context))

        """
        添加机构
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        accout -- 当前会话操作人
        input -- 机构参数输入
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addOrganization(self, accout, input, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_addOrganization.begin(self, ((accout, input), _response, _ex, _sent, context))

        """
        添加机构
        @author yaojianping
        @date 2019年8月22日 下午2:10:30
        Arguments:
        accout -- 当前会话操作人
        input -- 机构参数输入
        Returns: true-成功，false-失败
        """
        def end_addOrganization(self, _r):
            return _M_com.jimi.platform.user.generated.OrganizationManager._op_addOrganization.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.platform.user.generated.OrganizationManagerPrx.ice_checkedCast(proxy, '::com::jimi::platform::user::generated::OrganizationManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.platform.user.generated.OrganizationManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::platform::user::generated::OrganizationManager'
    _M_com.jimi.platform.user.generated._t_OrganizationManagerPrx = IcePy.defineProxy('::com::jimi::platform::user::generated::OrganizationManager', OrganizationManagerPrx)

    _M_com.jimi.platform.user.generated.OrganizationManagerPrx = OrganizationManagerPrx
    del OrganizationManagerPrx

    _M_com.jimi.platform.user.generated.OrganizationManager = Ice.createTempClass()
    class OrganizationManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::platform::user::generated::OrganizationManager')

        def ice_id(self, current=None):
            return '::com::jimi::platform::user::generated::OrganizationManager'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::platform::user::generated::OrganizationManager'

        def deleteOrganization(self, accout, oid, current=None):
            """
            删除机构
            @author yaojianping
            @date 2019年8月21日 下午2:06:26
            Arguments:
            accout -- 当前会话操作人
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteOrganization' not implemented")

        def disabledOrganization(self, accout, oid, isDisabled, current=None):
            """
            禁用/启用机构
            @author yaojianping
            @date 2019年8月21日 下午2:02:33
            Arguments:
            accout -- 当前会话操作人
            oid -- 机构id
            isDisabled -- true-禁用，false-启用
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'disabledOrganization' not implemented")

        def findAllChildByOid(self, accout, oid, current=None):
            """
            查询下级机构基本信息(该方法用于树形加载时)
            @author yaojianping
            @date 2019年8月21日 下午2:01:28
            Arguments:
            accout -- 当前会话操作人
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findAllChildByOid' not implemented")

        def findByOid(self, accout, oid, current=None):
            """
            查询机构基本信息(该方法用于树形加载时)
            @author yaojianping
            @date 2019年8月21日 下午1:59:48
            Arguments:
            accout -- 当前会话操作人
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findByOid' not implemented")

        def addOrganization(self, accout, input, current=None):
            """
            添加机构
            @author yaojianping
            @date 2019年8月22日 下午2:10:30
            Arguments:
            accout -- 当前会话操作人
            input -- 机构参数输入
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addOrganization' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.platform.user.generated._t_OrganizationManagerDisp)

        __repr__ = __str__

    _M_com.jimi.platform.user.generated._t_OrganizationManagerDisp = IcePy.defineClass('::com::jimi::platform::user::generated::OrganizationManager', OrganizationManager, (), None, ())
    OrganizationManager._ice_type = _M_com.jimi.platform.user.generated._t_OrganizationManagerDisp

    OrganizationManager._op_deleteOrganization = IcePy.Operation('deleteOrganization', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    OrganizationManager._op_disabledOrganization = IcePy.Operation('disabledOrganization', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    OrganizationManager._op_findAllChildByOid = IcePy.Operation('findAllChildByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_com.jimi.platform.user.generated._t_Args2, False, 0), ())
    OrganizationManager._op_findByOid = IcePy.Operation('findByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_com.jimi.platform.user.generated._t_OrganizationOutput, False, 0), ())
    OrganizationManager._op_addOrganization = IcePy.Operation('addOrganization', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), _M_com.jimi.platform.user.generated._t_AddOrganizationInput, False, 0)), (), ((), IcePy._t_bool, False, 0), ())

    _M_com.jimi.platform.user.generated.OrganizationManager = OrganizationManager
    del OrganizationManager

if '_t_Args3' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated._t_Args3 = IcePy.defineSequence('::com::jimi::platform::user::generated::Args3', (), _M_com.jimi.platform.user.generated._t_RoleOutput)

if '_t_Args4' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated._t_Args4 = IcePy.defineSequence('::com::jimi::platform::user::generated::Args4', (), IcePy._t_string)

_M_com.jimi.platform.user.generated._t_RoleManager = IcePy.defineValue('::com::jimi::platform::user::generated::RoleManager', Ice.Value, -1, (), False, True, None, ())

if 'RoleManagerPrx' not in _M_com.jimi.platform.user.generated.__dict__:
    _M_com.jimi.platform.user.generated.RoleManagerPrx = Ice.createTempClass()
    class RoleManagerPrx(Ice.ObjectPrx):

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: 角色列表
        """
        def findByOid(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_findByOid.invoke(self, ((accout, oid), context))

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findByOidAsync(self, accout, oid, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_findByOid.invokeAsync(self, ((accout, oid), context))

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findByOid(self, accout, oid, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_findByOid.begin(self, ((accout, oid), _response, _ex, _sent, context))

        """
        查询机构的角色基本信息
        @author yaojianping
        @date 2019年8月21日 下午2:34:07
        Arguments:
        accout -- 当前会话操作人
        oid -- 机构id
        Returns: 角色列表
        """
        def end_findByOid(self, _r):
            return _M_com.jimi.platform.user.generated.RoleManager._op_findByOid.end(self, _r)

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        accout -- 当前会话操作人
        input -- 角色参数
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def addRole(self, accout, input, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_addRole.invoke(self, ((accout, input), context))

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        accout -- 当前会话操作人
        input -- 角色参数
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def addRoleAsync(self, accout, input, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_addRole.invokeAsync(self, ((accout, input), context))

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        accout -- 当前会话操作人
        input -- 角色参数
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_addRole(self, accout, input, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_addRole.begin(self, ((accout, input), _response, _ex, _sent, context))

        """
        添加角色
        @author yaojianping
        @date 2019年8月21日 下午2:13:57
        Arguments:
        accout -- 当前会话操作人
        input -- 角色参数
        Returns: true-成功，false-失败
        """
        def end_addRole(self, _r):
            return _M_com.jimi.platform.user.generated.RoleManager._op_addRole.end(self, _r)

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        accout -- 当前会话操作人
        roleId -- 角色id
        context -- The request context for the invocation.
        Returns: true-成功，false-失败
        """
        def deleteRole(self, accout, roleId, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_deleteRole.invoke(self, ((accout, roleId), context))

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        accout -- 当前会话操作人
        roleId -- 角色id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def deleteRoleAsync(self, accout, roleId, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_deleteRole.invokeAsync(self, ((accout, roleId), context))

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        accout -- 当前会话操作人
        roleId -- 角色id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_deleteRole(self, accout, roleId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_deleteRole.begin(self, ((accout, roleId), _response, _ex, _sent, context))

        """
        删除角色
        @author yaojianping
        @date 2019年8月21日 下午2:25:53
        Arguments:
        accout -- 当前会话操作人
        roleId -- 角色id
        Returns: true-成功，false-失败
        """
        def end_deleteRole(self, _r):
            return _M_com.jimi.platform.user.generated.RoleManager._op_deleteRole.end(self, _r)

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        accout -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        context -- The request context for the invocation.
        """
        def authorize(self, accout, uid, roleId, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_authorize.invoke(self, ((accout, uid, roleId), context))

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        accout -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def authorizeAsync(self, accout, uid, roleId, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_authorize.invokeAsync(self, ((accout, uid, roleId), context))

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        accout -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_authorize(self, accout, uid, roleId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.jimi.platform.user.generated.RoleManager._op_authorize.begin(self, ((accout, uid, roleId), _response, _ex, _sent, context))

        """
        授权
        @author yaojianping
        @date 2019年8月21日 下午2:26:23
        Arguments:
        accout -- 当前会话操作人
        uid -- 用户id
        roleId -- 角色id
        """
        def end_authorize(self, _r):
            return _M_com.jimi.platform.user.generated.RoleManager._op_authorize.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.jimi.platform.user.generated.RoleManagerPrx.ice_checkedCast(proxy, '::com::jimi::platform::user::generated::RoleManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.jimi.platform.user.generated.RoleManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::jimi::platform::user::generated::RoleManager'
    _M_com.jimi.platform.user.generated._t_RoleManagerPrx = IcePy.defineProxy('::com::jimi::platform::user::generated::RoleManager', RoleManagerPrx)

    _M_com.jimi.platform.user.generated.RoleManagerPrx = RoleManagerPrx
    del RoleManagerPrx

    _M_com.jimi.platform.user.generated.RoleManager = Ice.createTempClass()
    class RoleManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::jimi::platform::user::generated::RoleManager')

        def ice_id(self, current=None):
            return '::com::jimi::platform::user::generated::RoleManager'

        @staticmethod
        def ice_staticId():
            return '::com::jimi::platform::user::generated::RoleManager'

        def findByOid(self, accout, oid, current=None):
            """
            查询机构的角色基本信息
            @author yaojianping
            @date 2019年8月21日 下午2:34:07
            Arguments:
            accout -- 当前会话操作人
            oid -- 机构id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'findByOid' not implemented")

        def addRole(self, accout, input, current=None):
            """
            添加角色
            @author yaojianping
            @date 2019年8月21日 下午2:13:57
            Arguments:
            accout -- 当前会话操作人
            input -- 角色参数
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'addRole' not implemented")

        def deleteRole(self, accout, roleId, current=None):
            """
            删除角色
            @author yaojianping
            @date 2019年8月21日 下午2:25:53
            Arguments:
            accout -- 当前会话操作人
            roleId -- 角色id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'deleteRole' not implemented")

        def authorize(self, accout, uid, roleId, current=None):
            """
            授权
            @author yaojianping
            @date 2019年8月21日 下午2:26:23
            Arguments:
            accout -- 当前会话操作人
            uid -- 用户id
            roleId -- 角色id
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'authorize' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.jimi.platform.user.generated._t_RoleManagerDisp)

        __repr__ = __str__

    _M_com.jimi.platform.user.generated._t_RoleManagerDisp = IcePy.defineClass('::com::jimi::platform::user::generated::RoleManager', RoleManager, (), None, ())
    RoleManager._ice_type = _M_com.jimi.platform.user.generated._t_RoleManagerDisp

    RoleManager._op_findByOid = IcePy.Operation('findByOid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_com.jimi.platform.user.generated._t_Args3, False, 0), ())
    RoleManager._op_addRole = IcePy.Operation('addRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), _M_com.jimi.platform.user.generated._t_AddRoleInput, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    RoleManager._op_deleteRole = IcePy.Operation('deleteRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    RoleManager._op_authorize = IcePy.Operation('authorize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_com.jimi.platform.user.generated._t_CurrentAccount, False, 0), ((), IcePy._t_long, False, 0), ((), _M_com.jimi.platform.user.generated._t_Args4, False, 0)), (), None, ())

    _M_com.jimi.platform.user.generated.RoleManager = RoleManager
    del RoleManager

# End of module com.jimi.platform.user.generated

__name__ = 'com.jimi.platform.user'

# End of module com.jimi.platform.user

__name__ = 'com.jimi.platform'

# End of module com.jimi.platform

__name__ = 'com.jimi'

# End of module com.jimi

__name__ = 'com'

# End of module com
